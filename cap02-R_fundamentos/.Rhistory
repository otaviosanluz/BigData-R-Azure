modelo
class(modelo)
modelo <- lm(y1~x)
modelo
class(modelo)
a <- modelo$coefficients[1]
b <- modelo$coefficients[2]
# Fórmula de Regressão
y2 <- a + b*x
# Visualize a linha de regressão
y2 <- a + (b * x)
plot(y2)
# Visualize a linha de regressão
lines(x, y2)
# Visualize a linha de regressão
lines(x, y2, lwd = 2)
Idade <- c(9,13,14,21,15,18,20,8,14,23,16,21,10,12,20,
9,13,5,15,21)
Tempo <- c(17.87,13.75,12.72,6.98,11.01,10.48,10.19,19.11,
12.72,0.45,10.67,1.59,14.91,14.14,9.40,16.23,
12.74,20.64,12.34,6.44)
plot(Idade, Tempo)
# Crie um Gráfico de Dispersão (ScatterPlot)
plot(Tempo, Idade)
y2 <- a + b*x
lines(x, y2, lwd = 2)
lines(x, y2, lwd = 2)
x <- seq(0, 100)
y <- 2 * x + 35
x
y
y1 <- y + rnorm(101, 0, 50)
y1
# Crie um plot do relacionamento de x e y1
plot(x, y1, main = 'Relacionamento entre y1 e x')
# Crie um modelo de regressão para as duas variáveis x e y1
modelo <- lm(y1~x)
a <- modelo$coefficients[1]
b <- modelo$coefficients[2]
# Fórmula de Regressão
y2 <- a + b*x
lines(x, y2, lwd = 2)
# Crie um Gráfico de Dispersão (ScatterPlot)
plot(Tempo, Idade)
Idade <- c(9,13,14,21,15,18,20,8,14,23,16,21,10,12,20,
9,13,5,15,21)
Tempo <- c(17.87,13.75,12.72,6.98,11.01,10.48,10.19,19.11,
12.72,0.45,10.67,1.59,14.91,14.14,9.40,16.23,
12.74,20.64,12.34,6.44)
# Crie um Gráfico de Dispersão (ScatterPlot)
plot(Tempo, Idade)
# Crie um Gráfico de Dispersão (ScatterPlot)
plot(Idade, Tempo, xlab = 'Idade', ylab = 'Tempo de Reação)'
# Crie um Gráfico de Dispersão (ScatterPlot)
plot(Idade, Tempo, xlab = 'Idade', ylab = 'Tempo de Reação')
plot(Idade, Tempo, xlab = 'Idade', ylab = 'Tempo de Reação')
# Crie um Gráfico de Dispersão (ScatterPlot)
plot(Idade, Tempo, xlab = 'Idade', ylab = 'Tempo de Reação')
# Crie um modelo de regressão
modelo <- lm(Tempo, Idade)
# Crie um modelo de regressão
modelo <- lm(Tempo~Idade)
modelo
reta <- 25.8134 - (0.9491 * Idade)
# Crie o gráfico da reta
lines(Idade, reta)
# Criando os dados
alturas = c(176, 154, 138, 196, 132, 176, 181, 169, 150, 175)
pesos = c(82, 49, 53, 112, 47, 69, 77, 71, 62, 78)
plot(alturas, pesos, pch = 16, cex = 1.3, col = "blue",
main = "Altura x Peso",
ylab = "Peso Corporal (kg)",
xlab = "Altura (cm)")
# Crie o modelo de regressão
modelo <- lm(pesos~alturas)
# Visualizando o modelo
modelo
# Gere a linha de regressão
reta <- -70.4627 - (0.8528 * Idade)
# Gere a linha de regressão
reta <- -70.4627 - (0.8528 * alturas)
lines(alturas, reta)
# Gere a linha de regressão
abline(-70.4627, 0.8528)
# Faça as previsões de pesos com base na nova lista de alturas
alturas2 = data.frame(c(179, 152, 134, 197, 131, 178, 185, 162, 155, 172))
# Plot
plot(alturas, pesos, pch = 16, cex = 1.3,
col = "blue",
main = "Altura x Peso",
ylab = "Peso (kg)",
xlab = "Altura (cm)")
# Construindo a linha de regressão
abline(lm(pesos ~ alturas))
# Gerando um gráfico com os valores residuais
for (k in 1: num)
lines(c(alturas[k], alturas[k]),
c(pesos[k], pesos[k]))
num <- length(alturas)
num
for (k in 1: num)
lines(c(alturas[k], alturas[k]),
c(pesos[k], pesos[k]))
for (k in 1: num)
lines(c(alturas[k], alturas[k]),
c(pesos[k], pesos[k]))
# Gerando gráficos com a distribuição dos resíduos
par(mfrow = c(2,2))
plot(modelo)
previsao <- predict(modelo, alturas2)
previsao
# Configurando o diretório de trabalho
# Coloque entre aspas o diretório de trabalho que você está usando no seu computador
# Não use diretórios com espaço no nome
setwd('C:/Users/otavio/Mundo/BigDataRAzure/Cap11_Machine_Learning')
getwd()
# install.packages("ggplot2")
install.packages("ggthemes")
library(ggplot2)
library(ggthemes)
library(dplyr)
df <- read.csv2('estudantes.csv')
library(ggplot2)
library(ggthemes)
library(dplyr)
# Carregando o dataset
df <- read.csv2('estudantes.csv')
# Explorando os dados
head(df)
summary(df)
str(df)
any(is.na(df))
View(df)
View(df)
# Obtendo as colunas numéricas
colunas_numericas <- sapply(df, is.numeric)
colunas_numericas
data_cor <- cor(df[, colunas_numericas])
data_cor
head(data_cor)
# Pacotes para visualizar a análise de correlação
install.packages('corrgram')
install.packages('corrplot')
library(corrgram)
library(corrplot)
# Criando um corrplot
corrplot(data_cor, method = 'color')
# Imprimir na tela
print('Estou iniciando minha caminhada na carreira de Cientista de Dados')
# Função help
help(mean)
?mean
# Se não souber o nome da função
help.search('randomforest')
# Se não souber o nome da função
help.search('randomForest')
??('randomForest')
??randomForest
getwd()
setwd('C:\Users\otavio\Mundo\Github\BigData-R-Azure\cap02-R_fundamentos')
setwd('C:/Users/otavio/Mundo/Github/BigData-R-Azure/cap02-R_fundamentos')
getwd()
# Subtração
10 - 5
# Multiplicação
3 * 5
# Divisão
63 / 7
# Potência
6^2
6**2
# Módulo
16 %% 3
x = 7
y = 5
x > 8
x < 8
x <= 8
x >= 8
x == 8
x != 8
# And
(x==8) & (x==6)
(x==8) & (x==5)
# Or
(x==8) | (x==6)
(x==7) | (x==5)
x > 8
print(x > 8)
getwd()
# Criando variáveis
var1 = 100
var1
mode(var1)
help('mode')
sqrt(var1)
# Podemos atribuir o valor de uma variável a outra variável
var2 = var1
var2
mode(var2)
typeof(var2)
help('typeof')
# Uma variável pode seer uma lista de elementos
var3 = c('primeiro', 'segundo', 'terceiro')
var3
mode(var3)
# Uma variável pode ser uma função
var4 = function(x) {x+3}
var4
mode(var4)
# Podemos mudar o modo do dado
var5 = as.character(var1)
var5
mode(var5)
# Atribuindo valores a objetos
x <- c(1,2,3)
x
x1 = c(1,2,3)
x1
c(1,2,3) -> y
y
assign('x', c(6.3,4.-2))
x
assign('x', c(6.3,4,-2))
x
# Verificando o valor em uma posição específica
x[1]
# Verificar objetos
ls()
objects()
# Remover objetos
rm(x)
x
getwd()
# Numeric - Todos os números criados em R são do modo numeric
# São armazenados como números decimais (double)
num1 <- 7
num1
class(num1)
mode(num1)
mode(num1)
num2 <- 16.82
num2
mode(num2)
typeof(num2)
# Numeric - Todos os números criados em R são do modo numeric
# São armazenados como números decimais (double)
num1 <- 7
num1
mode(num1)
class(num1)
typeof(num1)
num2 <- 16.82
num2
mode(num2)
typeof(num2)
# Integer
# Convertemos tipos numéricos para integer
is.integer(num2)
y = as.integer(num2)
y
class(y)
mode(y)
typeof(y)
('3.17')
as.integer('3.17')
as.integer('Joe')
as.integer('Joe')
as.integer(TRUE)
# Character
char1 = 'A'
char1
as.interger(FALSE)
as.integer(FALSE)
# Character
char1 = 'A'
char1
mode(char1)
typeof(char1)
char2 = 'cientista'
char2
mode(char2)
typeof(char2)
char3 = c('Data', 'Science', 'Academy')
char3
mode(char3)
typeof(char3)
compl = 2.5 + 4i
compl
mode(compl)
typeof(compl)
compl = 2.5 + 4i
compl
mode(compl)
typeof(compl)
sqrt(-1)
sqrt(-1+0i)
sqrt(as.complex(-1))
# Logic
x = 1; y = 2
z = x > y
z
class(z)
u = TRUE; v = FALSE
class(u)
u & v
u | v
!u
# operações com 0
5/0
0/5
# Erro
'Joe'/5
getwd()
vetor1 <- c(1:20)
vetor1
length(vetor1)
mode(vetor1)
class(vetor1)
typeof(vetor1)
# Matriz: Possui 2 dimensões e 1 tipo de dado
matriz1 <- matrix(1:20, nrow = 2)
matriz1
mode(matriz1)
class(matriz1)
typeof(matriz1)
# Array
array1 <- array(1:5, dim = c(3,3,3))
array1
length(array1)
mode(array1)
class(array1)
typeof(array1)
# Array: Possui 2 ou mais dimensões e 1 tipo de dado
array1 <- array(1:5, dim = c(3,2,3))
array1
# Data Frames: dados de diferentes tipos
# É uma matriz com diferentes tipos de dados
View(iris)
length(iris)
mode(iris)
class(iris)
typeof(iris)
# Listas: Coleções de diferentes objetos
# Diferentres tipos de dados são possíveis e comuns
lista1 <- list(a = matriz1, b = vetor1)
# Matriz: Possui 2 dimensões e 1 tipo de dado
matriz1 <- matrix(1:20, nrow = 2)
vetor1 <- c(1:20)
# Listas: Coleções de diferentes objetos
# Diferentres tipos de dados são possíveis e comuns
lista1 <- list(a = matriz1, b = vetor1)
lista1
mode(lista1)
length(lista1)
class(lista1)
typeof(lista1)
func1 <- function(x) {
var1 <- x * x
return(var1)
}
func1(5)
class(func1)
# Array: Possui 2 ou mais dimensões e 1 tipo de dado
array1 <- array(1:5, dim = c(3,2,3))
# Removendo objetos
objects()
rm(array1, func1)
objects()
getwd()
# Vetor de strings
vetor_caracter = c('Data', 'Science', 'Academy')
vetor_caracter
# Vetor de floats
vetor_numerico = c(1.90, 45.3, 13.6)
vetor_numerico
# Vetor de npumeros complexos
vetor_complexo = c(5.2+3i, 3.8+4i)
vetor_complexo
# Vetor de valores lógicos
vetor_logico = c(TRUE, TRUE, FALSE, TRUE)
vetor_logico
# Vetor de números inteiros
vetor_integer = c(2, 4, 6)
vetor_integer
# Utilizando seq()
vetor1 = seq(1:10)
vetor1
is.vector(vetor1)
vetor2 = rep(1:5)
vetor2
as.vector(vetor2)
as.vector(vetor2)
is.vector(vetor2)
# Indexação de vetores
a <- c(1,2,3,4,5)
a
a[1]
a[2]
b <- c('Data', 'Science', 'Academy')
b
b[1]
b[2]
b[3]
b[4]
# Combinando vetores
v1 = c(2,3,4)
v2 = c('aa', 'bb', 'cc', 'dd')
c(v1,v2)
# Operações com vetores
x = c(1,3,5,7)
y = c(2,4,6,8)
x * 5
x + y
x - y
x * y
x / y
# Somando vetores com números diferentes de elementos
alfa = c(10, 20, 30)
beta = c(1, 2, 3, 4, 5, 6, 7, 8, 9)
alfa + beta
# Vetor nomeado
v = c('Nelson', 'Mandela')
v
names(v) = c('Nome', 'Sobrenome')
v
v['Nome']
getwd()
getwd()
# Número de linhas
matrix (c(1,2,3,4,5,6), nr = 2)
matrix (c(1,2,3,4,5,6), nr = 3)
matrix (c(1,2,3,4,5,6), nr = 6)
# Número de linhas
matrix (c(1,2,3,4,5,6), nr = 7)
# Número de linhas
matrix (c(1,2,3,4,5,6), nr = 2)
# Número de linhas
matrix (c(1,2,3,4,5,6), nr = 2)
matrix (c(1,2,3,4,5,6), nr = 3)
matrix (c(1,2,3,4,5,6), nr = 6)
# Número de colunas
matrix (c(1,2,3,4,5,6), nc = 2)
# Matrizes precisam ter um número de elementos que seja múltiplo do número de linhas
matrix (c(1,2,3,4,5), nc = 2)
matrix(data = meus_dados, nrow = 5, ncol = 2, byrow = T)
# Criando matrizes a partir de vetores e preeenchendo a partir das linhas
meus_dados = c(1:10)
matrix(data = meus_dados, nrow = 5, ncol = 2, byrow = T)
matrix(data = meus_dados, nrow = 5, ncol = 2)
# Fatiando uma matriz
mat <- matrix(c(2,3,4,5), nr = 2)
mat
mat[1,2]
mat[2,2]
mat[1,3]
mat[,2]
# Criando uma matriz diagonal
matriz = 1:3
diag(matriz)
# Extraindo vetor de uma matriz diagonal
vetor = diag(matriz)
diag(vegtor)
diag(vetor)
# Transposta da matriz
w <- matrix (c(2,4,8,12), nr = 2, ncol = 2)
w
t(w)
u <- t(w)
u
# Matriz inversa
solve(w)
# Multiplicação de matrizes
mat1 <- matrix(c(2,3,4,5), nr = 2)
mat1
mat2 <- matrix(c(6,7,8,9), nr = 2)
mat2
mat1 * mat2
mat1 / mat2
mat1 + mat2
mat1 - mat2
# multiplicando matriz com vetor
x = c(1:4)
x
y <- matrix(c(2,3,4,5), nr = 2)
y
x * y
# Nomeando matrizes
mat3 <- matrix(c('Terra', 'Marte', 'Saturno', 'Jupiter'), nr = 2)
mat3
dimnames(mat3) = list(c('linha1', 'linha2'), c('coluna1', 'coluna2'))
mat3
mat3['linha1']
mat3[linha1]
mat3['linha1',]
# identificando linhas e colunas no momento de criação da matriz
matrix (c(1,2,3,4), nr = 2, dimnames = list(c('linha1', 'linha2'), c('coluna1', 'coluna2'))
# identificando linhas e colunas no momento de criação da matriz
matrix (c(1,2,3,4), nr = 2, dimnames = list(c('linha1', 'linha2'), c('coluna1', 'coluna2')))
# identificando linhas e colunas no momento de criação da matriz
matrix (c(1,2,3,4), nr = 2, dimnames = list(c('linha1', 'linha2'), c('coluna1', 'coluna2')))
# Combinando matrizes
mat4 <- matrix(c(2,3,4,5), nr = 2)
mat4
mat5 <- matrix(c(6,7,8,9), nr = 2)
mat5
cbind(mat4,mat5)
rbind(mat4,mat5)
# desconstruindo a matriz
c(mat4)
# Desconstruindo a matriz
c(mat4)
