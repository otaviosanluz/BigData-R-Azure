'este número não é menor que 7.'
}
x = 7
if (x < 7){
'Este número é menor que 7. '
} else if (x == 7){
'Este número é igual a 7.'
} else{
'Este número é maior que 7.'
}
x = 5
ifelse(x < 6, 'correto!', NA)
x = 9
ifelse(x < 6, 'correto!', NA)
# Expressões ifelse aninhadas
x = c(7,6,5)
ifelse(x < 5, 'Menor que 5',
ifelse(x == 5, 'igual a 5','maior que 5'))
# Expressões ifelse aninhadas
x = c(7,8,9)
ifelse(x < 5, 'Menor que 5',
ifelse(x == 5, 'igual a 5','maior que 5'))
func1 <- function(x,y){
ifelse(y > 7, x + y, 'não encontrado')
}
func1(4,2)
func1(40,7)
ifelse(y < 7, x + y, 'não encontrado')
func1 <- function(x,y){
ifelse(y < 7, x + y, 'não encontrado')
}
func1(4,2)
func1(40,7)
# rep
rep(rnorm(10), 5)
x = 1
repeat{
x = x + 3
if(x > 99)
break
print(x)
}
# loop for
for (i in 1:20) {print(i)}
for (q in rnorm(10)) {print(q)}
print(i)
for (i in 1:22){
if(i == 13)
break
print(i)
}
x = 1
while (x < 5){
x = x + 1
print(x)
}
for (i in 1:22){
if(i == 13 | i == 15)
break
print(i)
}
for (i in 1:22){
if(i == 13 | i == 15)
next
print(i)
}
y = 6
while (y < 5){
y = y + 10
print(y)
}
x = 1
while (x < 5){
x = x + 1
print(x)
}
y = 3
while (y < 5){
y = y + 10
print(y)
}
# Help
?sample
args(sample)
args(mean)
args(sd)
# Funções built-in
abs(-43)
sum(c(1:15))
mean(c(1:15))
round(c(1.1:5.8))
rev(c(1:5)) # reverso
seq(1:5)
sort(rev(c(1:5)))
append(c(1:5), 6)
vec1 <- c(1.5, 2.9, 3.3, 0.7, 1.9)
vec2 <- rev(vec1)
vec2
# Funções dentro de funções
plot(rnorm(10))
mean(c(abs(vec1), abs(vec2)))
# Criando funções
myfunc <- function(x) {x + x}
myfunc(10)
class(myfunc)
myfunc2 <- function(a,b) {
valor = a ^ b
print(valor)
}
myfunc2(4,3)
jogando_dados <- function(){
num <- sample(1:6, size = 1)
num
}
jogando_dados
jogando_dados()
jogando_dados()
jogando_dados()
jogando_dados()
# Escopo
print(num)
num <- c(1:6)
num # variável global
myfunc3 <- funtcion(...){
df <- data.frame(cbind(...))
}
myfunc3 <- function(...){
df <- data.frame(cbind(...))
}
myfunc3(vec1)
myfunc3 <- function(...){
df <- data.frame(cbind(...))
print(df)
}
myfunc3(vec1)
myfunc3(vec2,vec3)
vec1 <- (10:13)
vec2 <- c('a','b','c','d')
vec3 <- c(6.5,9.2,11.9,5.1)
myfunc3(vec1)
myfunc3(vec2,vec3)
myfunc3(vec1,vec2,vec3)
myfunc3 <- function(...){
df <- data.frame(rbind(...))
print(df)
}
myfunc3(vec1)
myfunc3(vec2,vec3)
myfunc3(vec1,vec2,vec3)
# Usando um loop
lista1 <- list(a = (1:20),b = (35:67))
# Calculando o total de cada elemento da lista com loop for
valor_a = 0
valor_b = 0
for(i in lista1$a){
valor_a = valor_a + i
}
for(j in lista1$b){
valor_b = valor_b + j
}
print(valor_a)
print(valor_b)
# Calculando cada elemento da lista com sapply
sapply(lista1, sum)
sapply(lista1, mean)
# apply()
x <- matrix(c(20,13,4,7,89,54,10,1,99,45), nr = 3, byrow = T)
# apply()
x <- matrix(c(20,13,4,7,89,54,10,1,99), nr = 3, byrow = T)
apply(x,mean) # erro
apply(x,1,mean) # média por linha
apply(x,2,mean) # média por coluna
apply(x,1,plot)
result <- apply(x,1,mean)
result
# Aplicando apply a um Dataframe
escola <- data.frame(aluno = c('maria','joão','aurélio','miguel','gabriel','otavio'),
matematica = c(90,55,68,70,25,96),
fisica = c(10,43,33,78,47,91),
quimica = c(77,87,54,61,45,90))
escola
escola$matematica
# Calculando a média por aluno
escola$media = NA
escola
escola$media <- apply(escola[,c(2,3,4)],1,mean) # todas as linhas, colunas 2,3,4
escola
escola$media <- round(escola$media)
escola
tabela_basquete <- data.frame(equipe = gl(5,5,labels = ('Equipe', LETTERS[1:5])),
jogador = sample(LETTERS,25),
num_cestas = floor(runif(25,min = 0,max = 50)))
tabela_basquete <- data.frame(equipe = gl(5,5,labels = paste('Equipe', LETTERS[1:5])),
jogador = sample(LETTERS,25),
num_cestas = floor(runif(25,min = 0,max = 50)))
View(tabela_basquete)
summary(tabela_basquete)
# tapply() vs sqldf
library(sqldf)
sqldf('select equipe, sum(num_cestas) from tabela_basquete group by equipe')
tapply(tabela_basquete$num_cestas,tabela_basquete$equipe,sum)
tapply(tabela_basquete$num_cestas,tabela_basquete$equipe,mean)
dat <- data.frame(species=c(rep(c(1,2,3), each=5)),
petal.length=c(rnorm(5, 4.5, 1),
rnorm(5, 4.5, 1),
rnorm(5, 5.5, 1)),
petal.width=c(rnorm(5, 2.5, 1),
rnorm(5, 2.5, 1),
rnorm(5, 4, 1)))
dat$species <- factor(dat$species)
View(dat)
})
}
by(dat,dat$species,function(x){
# calcular o comprimento médio da pétala por espécie
mean.pl <- mean(x$petal.length)
})
# lapply()
lista <- list(a = (1:10), b = (45:77))
lista
lapply(lista,sum)
saaply(lista,sum)
sapply(lista,sum)
# vapply()
vapply(lista1,c(Min. = 0,'1stqu' = 0,Median = 0,'3sqtu' = 0, Max = 0))
# vapply()
vapply(lista,fivenum,c(Min. = 0,'1stqu' = 0,Median = 0,'3sqtu' = 0, Max = 0))
# vapply()
vapply(lista,c(Min. = 0,'1stqu' = 0,Median = 0,'3sqtu' = 0, Max = 0))
?fivenum
?vapply
# replicate
replicate(7,runif(10))
# mapply()
mapply(rep,1:4,4:1)
# rapply()
lista2 <- list(a = c(1:5), b = c(6:10))
lista2
rapply(lista2,sum)
rapply(lista2,sum,how = 'list')
getwd()
# unlist()
# Produz um vetor com os elementos da lista
lst1 <- list(6,'b',15)
class(list)
class(lst1)
unlist(lst1)
vec1 <- unlist(lst1)
class(vec1)
lst2 <- list(v1 = 6,v2 = list(381,2190),v3 = c(30,217))
lst2
unlist(lst2)
mean(unlist(lst2))
round(mean(unlist(lst2)))
# do.call()
# Executa uma função em um objeto
# **ATENÇÃO**
# As funções da família apply aplicam uma função a cada elemento de um objeto
# A função do.call aplica uma função a um objeto inteiro e não a cada elemento individualmente
data <- list()
N <- 100
for (n in 1:N){
data[[n]] = data.frame(index = n,char = sample(letters, 1),z = rnorm(1))
}
head(data)
do.call(rbind,data)
class(do.call(rbind,data))
# lapply() x do.call()
y <- list(1:3, 4:6, 7:9)
y
lapply(y,sum)
do.call(sum,y) # soma para todos os elementos da lista
# O resultado da função lapply() pode ser obtido de ouras formas
# Pacote plyr
library('plyr')
y <- list(1:3,4:6,7:9)
y
ldply(y,sum)
# strsplit()
# Divide uma string ou vetor de caracteres
texto <- 'Data Science Academy'
strsplit(texto, " ")
dates <- c('1998-05-23','2008-09-13','1977-01-30')
temp <- strsplit(dates,'-')
temp
class(temp)
# Transforma a lista em matriz, fazendo antes um unlist()
matrix(unlist(temp), ncol = 3, byrow = T)
names <- c('brian, miguel','raquel, moraes','joao, teixeira',
'dorsey, jack','glass, noah','mirian, leite')
temp <- strsplit(names,',')
temp
names <- c('brian, miguel','raquel, moraes','joao, teixeira',
'dorsey, jack','glass, noah','mirian, leite')
cofounded <- rep(c('google','twitter'),c(2,4))
temp <- strsplit(names,',')
temp
temp <- strsplit(names,', ')
temp
palavras <- strsplit(frase,' ')[[1]]
frase <- 'Muitas vezes temos que repetir algo várias vezes para conseguir aprender'
palavras <- strsplit(frase,' ')[[1]]
palavras
unique(tolower(palavras))
palavras <- strsplit(frase,' ')
palavras
# strsplit() com dataframes
antes = data.frame(attr = c(1,30,4,6), tipo = c('pao_e_agua','pao_e_agua_2'))
antes
strsplit(as.character(antes$tipo),'_e_')
a = strsplit(as.character(antes$tipo),'_e_')
class(a)
library(stringr)
str_split_fixed(antes$tipo, '_e_',2)
# Usando do.call()
antes = data.frame(attr = c(1,30,4,6), tipo = c('pao_e_agua','pao_e_agua_2'))
antes
depois <- strsplit(as.character(antes$tipo),'_e_')
depois
do.call(rbind,depois)
# Usando dplyr e tidyr
library(dplyr)
library(tidyr)
antes <- data.frame(
attr = c(1,30,4,6),
tipo = c('pao_e_agua','pao_e_agua_2')
)
antes
antes %>%
separate(tipo,c('pao','agua'),'_e_')
search()
str <- c("Expressões", "regulares", "em linguagem R",
"permitem a busca de padrões", "e exploração de textos",
"podemos buscar padrões em dígitos",
"como por exemplo",
"10992451280")
length(str)
str
# grep()
grep('ex',str,value = F)
grep('ex',str,value = T)
grep('\\d',str,value = F)
grep('\\d'str,value = T)
grep('\\d',str,value = T)
# grepl()
grepl('\\d+', str)
grepl('\\D', str)
# gsub() => substituindo padrões
gsub('em', '***', str)
gsub('ex', 'EX', str)
# sub()
sub('em', 'EM', str)
# regexpr()
frase <- "Isso é uma string."
regexpr(pattern = "u", frase) # aonde esta a letra u?
frase[[8]]
frase[8]
# Hora e Data do sistema
hoje <- Sys.Date() # data atual
hoje
class(hoje)
Sys.time() # horário atual
Sys.timezone()
# Formatando a saída - as.Date()
as.Date('2018-06-28')
as.Date('Jun-28-18', format = '%b-%d-%y')
as.Date("28 June, 2018", format = "%d %B, %Y")
# Função format()
Sys.Date()
format(Sys.Date(), format = '%d %B, %Y')
format(Sys.Date(), format = 'Hoje é %A')
# Exercício 1 - Pesquise pela função que permite listar todos os arquivo no diretório de trabalho
dir()
df <- data.frame(v1 = c('a','b','c','d','e'), v2 = c(T,F,F,T,T), v3 = c(1:5))
df
class(df)
?rep
# Criando o vetor
vec <- c(10,5,43,11,2,-9,0,17,-22,90,3)
vec
class(vec)
typeof(vec)
for i in vec:{
if (i > 10):
print(i)
}
for (i in vec){
if (i > 10){
print(i)}
}
# Exercício 4 - Conisdere a lista abaixo. Crie um loop que imprima no console cada elemento da lista
lst <- list('oi',10,T,-22,'otavio',55)
for (i in lst){print(i)}
mat1 <- matrix(c(1:50), nrow = 5, ncol = 5, byrow = T)
mat1
mat2 <- t(mat1)
mat2
# Multiplicação element-wise
mat1*mat2
# Multiplicação de matrizes
mat1%<%mat2
# Multiplicação de matrizes
mat1 %<% mat2
# Multiplicação de matrizes
mat1%*%mat2
vec <- c(1:10)
mat1 <- matrix(c(1:9), nrow = 3, ncol = 3)
lst <- list(22:32)
df <- data.frame(v1 = c('a','b','c','d','e'), v2 = c(T,F,F,T,T), v3 = c(1:5))
?names
mat2 <- matrix(1:90, 10)
mat2
?sample
mat1 <- matrix(c(1:50), nrow = 5, ncol = 5, byrow = T)
mat1
apply(mat1,1,sum)
apply(mat1,2,sum)
a <- c(100, 10, 10000, 1000)
a
sort(a)
mat1 <- matrix(c(1:50), nrow = 5, ncol = 5, byrow = T)
mat1
for (i in mat1) {
if (i > 15){
print(i)}
}
mat2 <- matrix(1:90, 10)
mat2
sample(mat1,50)
sample(mat2,50)
sample(mat2,50,replace = T)
sample(mat2,50,replace = F)
sample(mat2,50,replace = F)
apply(mat2,1,sample(mat2,50) <- NA)
sample(mat2,50)
sample(mat2,50) <- NA
NA <- sample(mat2,50)
b <- sample(mat2,50)
b
b <- NA
b
# Exercício 1 - Pesquise pela função que permite listar todos os arquivo no diretório de trabalho
dir()
list.files()
df <- data.frame(v1 = c('a','b','c','d','e'), v2 = c(T,F,F,T,T), v3 = c(1:5))
df
class(df)
vec <- c(10,5,43,11,2,-9,0,17,-22,90,3)
vec
class(vec)
for (i in vec){
if (i > 10){
print(i)
print('Este elemento é maior que 10')
}  else }
print(i)
print('Este elemento é menor que 10')
}
for (i in vec){
if (i > 10){
print(i)
print('Este elemento é maior que 10')
}  else }
print(i)
print('Este elemento é menor que 10')
}
}
for (i in vec){
if (i > 10){
print(i)}
}
for (i in vec){
if (i > 10){
print(i)
print('Este número é maior que 10.')}
}
lst <- list('oi',10,T,-22,'otavio',55)
for (i in lst){print(i)}
# Exercício 4 - Conisdere a lista abaixo. Crie um loop que imprima no console cada elemento da lista
lst <- list('oi',10,T,-22,'otavio',55)
lst
# Exercício 6 - Crie um vetor, matriz, lista e dataframe e faça a nomeação de cada um dos objetos
vec <- c(1:5)
vec
names(vec) <- c('col1','col2','col3','col4','col5')
vec
names(mat1) <- c('col1','col2','col3')
mat1 <- matrix(c(1:9), nrow = 3, ncol = 3)
names(mat1) <- c('col1','col2','col3')
mat1
mat1 <- matrix(c(1:9), nrow = 3, ncol = 3)
dimnames(mat1) <- list(c('obs1','obs2','obs3'), c('var1','var2','var3'))
mat1
lst <- list(22:25)
names(lst) <- c('dim1','dim2','dim3','dim4')
lst <- list(1,'c',4,c(1:3))
names(lst) <- c('dim1','dim2','dim3','dim4')
lst
df <- data.frame(v1 = c('a','b','c','d','e'), v2 = c(T,F,F,T,T), v3 = c(1:5))
colnames(df) <- c('caracteres','logico','integer')
rownames(df) <- c('obs1','obs2','obs3')
df
rownames(df) <- c('obs1','obs2','obs3','obs4','obs5')
df
mat2 <- matrix(1:90, 10)
mat2
mat2[sample(1:50,10)] = NA
mat2
a <- c(100, 10, 10000, 1000)
a
sort(a)
order(a)
