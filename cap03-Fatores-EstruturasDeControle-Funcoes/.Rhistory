# Exercício 4 - Usando a função read.table() leia o arquivo do link abaixo para uma dataframe
# http://data.princeton.edu/wws509/datasets/effort.dat
?read.table
# Exercício 4 - Usando a função read.table() leia o arquivo do link abaixo para uma dataframe
# http://data.princeton.edu/wws509/datasets/effort.dat
read.table('http://data.princeton.edu/wws509/datasets/effort.dat')
# Exercício 4 - Usando a função read.table() leia o arquivo do link abaixo para uma dataframe
# http://data.princeton.edu/wws509/datasets/effort.dat
df <- read.table('http://data.princeton.edu/wws509/datasets/effort.dat')
View(df)
?names
?names
# Exercício 5 - Transforme o dataframe anterior, em um dataframe nomeado com os seguintes labels:
# c("config", "esfc", "chang")
names(df) <- c('config','esfc','chang')
View(df)
# Exercício 4 - Usando a função read.table() leia o arquivo do link abaixo para uma dataframe
# http://data.princeton.edu/wws509/datasets/effort.dat
df <- data.frame(read.table('http://data.princeton.edu/wws509/datasets/effort.dat'))
# Exercício 4 - Usando a função read.table() leia o arquivo do link abaixo para uma dataframe
# http://data.princeton.edu/wws509/datasets/effort.dat
df <- data.frame(read.table('http://data.princeton.edu/wws509/datasets/effort.dat'))
View(df)
class(df)
# Exercício 5 - Transforme o dataframe anterior, em um dataframe nomeado com os seguintes labels:
# c("config", "esfc", "chang")
names(df) <- c('col1','col2','col3')
View(df)
getwd()
getwd()
setwd('C:/Users/otavio/Mundo/Github/BigData-R-Azure/cap03-Fatores-EstruturasDeControle-Funcoes')
getwd()
vec1 <- c('Macho','Femea','Macho','Macho','Femea')
vec1 <- c('Macho','Femea','Macho','Macho','Femea')
fac_vec1 <- factor(vec1)
fac_vec1
class(vec1)
class(fac_vec1)
# Variáveis categóricas nominais
vec <- c('rinoceronte','macaco','zebra','leão','zebra')
vec
fac_vec <- factor(vec)
fac_vec
class(vec)
class(fac_vec)
# Variáveis categóricas ordinais
# Possuem uma ordem natural
grad <- c('doutorado','mestrado','phd','bacharelado','mestrado','doutorado')
vec
grad
fac_grad <- factor(grad, order = T, levels = c('phd','doutorado','mestrado','bacharelado'))
fac_grad
levels(fac_grad)
# Sumarizar os dados fornece uma visão geral sobre o conteúdo das variáveis
summary(grad)
summary(fac_grad)
vec2 <- c('m','f','m','m','m','f','m','f','f','m','f','f','f','m','m')
vec2
fac_vec2 <- factor(vec2)
fac_vec2
levels(fac_vec2) <- c('Fêmea','Macho')
fac_vec2
summary(fac_vec2)
summary(vec2)
summary(vec2)
# Mais exemplos
data = c(1,2,2,3,1,1,1,3,3,2,1,1,2,3,3,3,2)
fdata = factor(data)
fdata
rdata = factor(data, labels = c('I','II','III'))
rdata
rdata = factor(data, labels = c('II','I','III'))
rdata
rdata = factor(data, labels = c('I','II','III'))
rdata
# Fatores não-ordenados
set1 <- c('AA','B','BA','CC','BB','BC','CC','CC','BA')
set1
# Transoformando os dados
# R apenas criou os níveis, o que significa que  não exista uma hierarquia
f.set1 <- factor(set1)
f.set1
class(f.set1)
is.ordered(f.set1)
# Fatores ordenados
o.set1 <- factor(set1,
levels = c('CA',B))
# Fatores ordenados
o.set1 <- factor(set1,
levels = c('CA','BA','AA','CC','B'),
ordered = T)
o.set1
is.ordered(o.set1)
as.numeric(o.set1)
table(o.set1)
# Fatores e Dataframes
df <- read.csv('etnias.csv',sep = ',')
df
# Variáveis do tipo fator
str(df)
# Níveis dos fatores
levels(df$Etnia)
summary(df$Etnia)
# Plot
plot(df$Idade~df$Etnia, xlab = 'Etnia', ylab = 'Idade', main = 'Idade por Etnia')
# Regressão
summary(lm(Idade~Etnia, data = df))
# Convertendo uma coluna em variável categórica, isso criará um fator não-ordenado
str(df)
df$Estado_Civil.cat <- factor(df$Estado_Civil, labels = c('solteiro','casado','divorciado'))
df
str(df)
vec1 <- c(1001,1002,1003,1004,1005)
vec2 <- c(0,1,1,0,2)
vec3 <- c('verde','laranja','azul','laranja','verde')
# Unindo os vetores em um dataframe
df <- data.frame(vec1,vec2,vec3)
df
# Verificando que o R categorizou a última coluna como fator
str(df)
# verificando os níveis do fator. Perceba que os níveis estão categorizados em ordem
levels(df$vec3)
df$cat1
# Criando uma outra coluna e atribuindo labels
df$cat1 <- factor(df$vec3, levels = c('cor2','cor1','cor3'))
df
vec1 <- c(1001,1002,1003,1004,1005)
vec2 <- c(0,1,1,0,2)
vec3 <- c('verde','laranja','azul','laranja','verde')
# Unindo os vetores em um dataframe
df <- data.frame(vec1,vec2,vec3)
df
# Verificando que o R categorizou a última coluna como fator
str(df)
# Verificando os níveis do fator. Perceba que os níveis estão categorizados em ordem
levels(df$vec3)
# Criando uma outra coluna e atribuindo labels
df$cat1 <- factor(df$vec3, levels = c('cor2','cor1','cor3'))
df
# Internamente, os fatores são registrados como inteiros, mas a ordenação
str(df)
# Criando uma outra coluna e atribuindo labels
df$cat2 <- factor(df$vec2, labels = c('divorciado','casado','solteiro'))
df
str(df)
levels(df)
levels(df$cat2)
getwd()
x = 25
if (x < 30)
{'este número é menor que 30.'}
# else
if (x < 7){
'Este número é menor que 7.'
} else {
'este número não é menor que 7.'
}
x = 7
if (x < 7){
'Este número é menor que 7. '
} else if (x == 7){
'Este número é igual a 7.'
} else{
'Este número é maior que 7.'
}
x = 5
ifelse(x < 6, 'correto!', NA)
x = 9
ifelse(x < 6, 'correto!', NA)
# Expressões ifelse aninhadas
x = c(7,6,5)
ifelse(x < 5, 'Menor que 5',
ifelse(x == 5, 'igual a 5','maior que 5'))
# Expressões ifelse aninhadas
x = c(7,8,9)
ifelse(x < 5, 'Menor que 5',
ifelse(x == 5, 'igual a 5','maior que 5'))
func1 <- function(x,y){
ifelse(y > 7, x + y, 'não encontrado')
}
func1(4,2)
func1(40,7)
ifelse(y < 7, x + y, 'não encontrado')
func1 <- function(x,y){
ifelse(y < 7, x + y, 'não encontrado')
}
func1(4,2)
func1(40,7)
# rep
rep(rnorm(10), 5)
x = 1
repeat{
x = x + 3
if(x > 99)
break
print(x)
}
# loop for
for (i in 1:20) {print(i)}
for (q in rnorm(10)) {print(q)}
print(i)
for (i in 1:22){
if(i == 13)
break
print(i)
}
x = 1
while (x < 5){
x = x + 1
print(x)
}
for (i in 1:22){
if(i == 13 | i == 15)
break
print(i)
}
for (i in 1:22){
if(i == 13 | i == 15)
next
print(i)
}
y = 6
while (y < 5){
y = y + 10
print(y)
}
x = 1
while (x < 5){
x = x + 1
print(x)
}
y = 3
while (y < 5){
y = y + 10
print(y)
}
# Help
?sample
args(sample)
args(mean)
args(sd)
# Funções built-in
abs(-43)
sum(c(1:15))
mean(c(1:15))
round(c(1.1:5.8))
rev(c(1:5)) # reverso
seq(1:5)
sort(rev(c(1:5)))
append(c(1:5), 6)
vec1 <- c(1.5, 2.9, 3.3, 0.7, 1.9)
vec2 <- rev(vec1)
vec2
# Funções dentro de funções
plot(rnorm(10))
mean(c(abs(vec1), abs(vec2)))
# Criando funções
myfunc <- function(x) {x + x}
myfunc(10)
class(myfunc)
myfunc2 <- function(a,b) {
valor = a ^ b
print(valor)
}
myfunc2(4,3)
jogando_dados <- function(){
num <- sample(1:6, size = 1)
num
}
jogando_dados
jogando_dados()
jogando_dados()
jogando_dados()
jogando_dados()
# Escopo
print(num)
num <- c(1:6)
num # variável global
myfunc3 <- funtcion(...){
df <- data.frame(cbind(...))
}
myfunc3 <- function(...){
df <- data.frame(cbind(...))
}
myfunc3(vec1)
myfunc3 <- function(...){
df <- data.frame(cbind(...))
print(df)
}
myfunc3(vec1)
myfunc3(vec2,vec3)
vec1 <- (10:13)
vec2 <- c('a','b','c','d')
vec3 <- c(6.5,9.2,11.9,5.1)
myfunc3(vec1)
myfunc3(vec2,vec3)
myfunc3(vec1,vec2,vec3)
myfunc3 <- function(...){
df <- data.frame(rbind(...))
print(df)
}
myfunc3(vec1)
myfunc3(vec2,vec3)
myfunc3(vec1,vec2,vec3)
# Usando um loop
lista1 <- list(a = (1:20),b = (35:67))
# Calculando o total de cada elemento da lista com loop for
valor_a = 0
valor_b = 0
for(i in lista1$a){
valor_a = valor_a + i
}
for(j in lista1$b){
valor_b = valor_b + j
}
print(valor_a)
print(valor_b)
# Calculando cada elemento da lista com sapply
sapply(lista1, sum)
sapply(lista1, mean)
# apply()
x <- matrix(c(20,13,4,7,89,54,10,1,99,45), nr = 3, byrow = T)
# apply()
x <- matrix(c(20,13,4,7,89,54,10,1,99), nr = 3, byrow = T)
apply(x,mean) # erro
apply(x,1,mean) # média por linha
apply(x,2,mean) # média por coluna
apply(x,1,plot)
result <- apply(x,1,mean)
result
# Aplicando apply a um Dataframe
escola <- data.frame(aluno = c('maria','joão','aurélio','miguel','gabriel','otavio'),
matematica = c(90,55,68,70,25,96),
fisica = c(10,43,33,78,47,91),
quimica = c(77,87,54,61,45,90))
escola
escola$matematica
# Calculando a média por aluno
escola$media = NA
escola
escola$media <- apply(escola[,c(2,3,4)],1,mean) # todas as linhas, colunas 2,3,4
escola
escola$media <- round(escola$media)
escola
tabela_basquete <- data.frame(equipe = gl(5,5,labels = ('Equipe', LETTERS[1:5])),
jogador = sample(LETTERS,25),
num_cestas = floor(runif(25,min = 0,max = 50)))
tabela_basquete <- data.frame(equipe = gl(5,5,labels = paste('Equipe', LETTERS[1:5])),
jogador = sample(LETTERS,25),
num_cestas = floor(runif(25,min = 0,max = 50)))
View(tabela_basquete)
summary(tabela_basquete)
# tapply() vs sqldf
library(sqldf)
sqldf('select equipe, sum(num_cestas) from tabela_basquete group by equipe')
tapply(tabela_basquete$num_cestas,tabela_basquete$equipe,sum)
tapply(tabela_basquete$num_cestas,tabela_basquete$equipe,mean)
dat <- data.frame(species=c(rep(c(1,2,3), each=5)),
petal.length=c(rnorm(5, 4.5, 1),
rnorm(5, 4.5, 1),
rnorm(5, 5.5, 1)),
petal.width=c(rnorm(5, 2.5, 1),
rnorm(5, 2.5, 1),
rnorm(5, 4, 1)))
dat$species <- factor(dat$species)
View(dat)
})
}
by(dat,dat$species,function(x){
# calcular o comprimento médio da pétala por espécie
mean.pl <- mean(x$petal.length)
})
# lapply()
lista <- list(a = (1:10), b = (45:77))
lista
lapply(lista,sum)
saaply(lista,sum)
sapply(lista,sum)
# vapply()
vapply(lista1,c(Min. = 0,'1stqu' = 0,Median = 0,'3sqtu' = 0, Max = 0))
# vapply()
vapply(lista,fivenum,c(Min. = 0,'1stqu' = 0,Median = 0,'3sqtu' = 0, Max = 0))
# vapply()
vapply(lista,c(Min. = 0,'1stqu' = 0,Median = 0,'3sqtu' = 0, Max = 0))
?fivenum
?vapply
# replicate
replicate(7,runif(10))
# mapply()
mapply(rep,1:4,4:1)
# rapply()
lista2 <- list(a = c(1:5), b = c(6:10))
lista2
rapply(lista2,sum)
rapply(lista2,sum,how = 'list')
