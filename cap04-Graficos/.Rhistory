getwd()
# Diretório de trabalho
setwd('C:/Users/otavioMundo/Github/BigData-R-Azure/cap04-Graficos')
# Diretório de trabalho
setwd('C:/Users/otavio/Mundo/Github/BigData-R-Azure/cap04-Graficos')
getwd()
# png
png('grafico1.png', width = 500, height = 500, res = 72)
plot(iris$Sepal.Length, iris$Petal.Length,
col = iris$Species,
main = 'Gráfico gerado a partir do Iris')
dev.off()
# pdf
pdf('grafico2.pdf')
plot(iris$Sepal.Length, iris$Petal.Length,
col = iris$Species,
main = 'Gráfico gerado a partir do Iris')
dev.off()
library(plotrix)
par(mfrow = c(1,1), col.axis = "red")
plot(1:6, las = 3, xlab = "lty 1:6", ylab = "", main = "Mais opções ao plot")
library(plotrix)
install.packages('plotrix') # Acessórios de plotagem
library(plotrix)
par(mfrow = c(1,1), col.axis = "red")
plot(1:6, las = 3, xlab = "lty 1:6", ylab = "", main = "Mais opções ao plot")
ablineclip(v=1, lty=1, col="sienna2", lwd=2)
install.packages('plotrix') # Acessórios de plotagem
install.packages("plotrix")
library(plotrix)
par(mfrow = c(1,1), col.axis = "red")
plot(1:6, las = 3, xlab = "lty 1:6", ylab = "", main = "Mais opções ao plot")
ablineclip(v=1, lty=1, col="sienna2", lwd=2)
ablineclip(v=2, lty=1, col="sienna2", lwd=2)
ablineclip(v=3, lty=1, col="sienna2", lwd=2)
ablineclip(v=4, lty=1, col="sienna2", lwd=2)
ablineclip(v=5, lty=1, col="sienna2", lwd=2)
ablineclip(v=6, lty=1, col="sienna2", lwd=2)
ablineclip(v=7, lty=1, col="sienna2", lwd=2)
plot(lynx)
plot(lynx, type="o", main="Type o")
plot(lynx, type="s", main="Type s")
plot(lynx, type="n", main="Type n")
plot(lynx, type="b", main="Type b")
# Dois plots juntos
par(mar = c(4,3,3,3), col.axis = 'black')
plot(cars$speed, type = 's', col = 'red', bty = 'n', xlab = 'Cars ID', ylab = '')
text(8, 14, 'Velocidade', cex = 0.85, col = 'red')
par(new = TRUE)
plot(cars$dist, type="s", bty="n", ann=F, axes=F, col="darkblue")
axis(side=4)
text(37, 18, "Distância", cex=0.85, col="darkblue")
title(main="Velocidade x Distância")
# Plots a partir de datasets
df <- read.csv('pibpercap.csv', stringsAsFactors = F)
df_1982 <- subset(df, ano == 1982)
plot(expectativa ~ pibpercap, data = df_1982, log = "x")
getwd()
# Define os dados
set.seed(67)
x = rnorm(10,5,7)
y = rpois(10,7)
z = rnorm(10,6,7)
t = rpois(10,9)
x
class(x)
y
?cex.main
?plot
# Plot
plot(x,y,col = 123,pch = 10, main = 'Multi Scatterplot',
col.main = 'red',cex.main = 1.5, xlab = 'Variável Independente',
ylab = 'Variável Dependente')
# Plot
plot(x,y,col = 123,pch = 10, main = 'Multi Scatterplot',
col.main = 'red',cex.main = 0.1, xlab = 'Variável Independente',
ylab = 'Variável Dependente')
# Plot
plot(x,y,col = 123,pch = 10, main = 'Multi Scatterplot',
col.main = 'red',cex.main = 1.5, xlab = 'Variável Independente',
ylab = 'Variável Dependente')
# Adiciona pontos
points(z,t,col = 'blue',pch = 4)
# Adiciona pontos
points(y,t,col = 777,pch = 9)
# Cria legenda
legend(-6,5.9,legend = c('Nível 1','Nível 2','Nível 3'),
col = c(123,'blue',777),pch = c(10,4,9),
cex = 0.65,btv = 'n')
# Cria legenda
legend(-6,5.9,legend = c('Nível 1','Nível 2','Nível 3'),
col = c(123,'blue',777),pch = c(10,4,9),
cex = 0.65,bty = 'n')
# Cria legenda
legend(-6,5.9,legend = c('Nível 1','Nível 2','Nível 3'),
col = c(123,'blue',777),pch = c(10,4,9),
cex = 0.65)
# Anexando o dataset
attach(sleep)
# Boxplort
sleepbpxplot = boxplot(data = sleep,extra ~ group,
main = 'Duração do Sono',
col.main = 'red',ylab = 'Horas',xlab = 'Droga')
# Calculo da média
medias = by(extra,group,mean)
# Adiciona as médias no gráfico
points(medias,col = 'red')
# Boxplot na horizontal
horizontalbpxplot = boxplot(data = sleep,extra ~ group,
main = 'Duração do Sono',
col.main = 'red',ylab = 'Horas',xlab = 'Droga',
horizontal = T)
# Adicionando cores
horizontalbpxplot = boxplot(data = sleep,extra ~ group,
main = 'Duração do Sono',
col.main = 'red',ylab = 'Horas',xlab = 'Droga',
horizontal = T,col = c('red','blue'))
dados = cars$speed
# construindo um histograma
hist(dados)
hist(dados,breaks = 10,main = 'Histograma das Velocidades')
hist(dados,labels = T,breaks = c(0,5,10,20,30),main = 'Histograma das Velocidades')
hist(dados,labels = T,breaks = 10,main = 'Histograma das Velocidades')
hist(dados,labels = T,breaks = 10,main = 'Histograma das Velocidades')
hist(dados,labels = T,breaks = 10,main = 'Histograma das Velocidades')
hist(dados,labels = T,ylim = c(0,10),breaks = 10,main = 'Histograma das Velocidades')
# adicionando linhas ao histograma
grafico = hist(dados,breaks = 10,main = 'Histograma das Velocidades')
xaxis = seq(min(dados),max(dados),length = 10)
yaxis = dnorm(xaxis,mean = mean(dados),sd = sd(dados))
yaxis = yaxis*diff(grafico$mids)*length(dados)
lines(xaxis,yaxis,col = 'red')
?seq
seq(1,10)
seq(1,10,2)
xaxis
yaxis
grafico
lines(xaxis,yaxis,col = 'red')
# Preparando os dados - Número de casamentos em um igreja de SP
dados <- matrix(c(652,1537,598,242,36,46,38,21,218,237,106,67),nrow = 3,byrow = T)
dados
# Nomeando linhas e colunas da matriz
colnames(dados) <- c('0','1-150','151-300','>300')
rownames(dados) <- c('jovem','adulto','idoso')
dados
# Construindo o BarPLot
barplot(dados,beside = T)
barplot(dados)
# Construindo o plot - Stacked Bar Plot
# As 3 faixas de idade são representadas na mesma coluna para as diferentes quantidades
barplot(dados,col = c('red','blue','black'))
# Crie uma legenda para o gráfico anterior
colors()
?barplot
# Construindo o plot - Stacked Bar Plot
# As 3 faixas de idade são representadas na mesma coluna para as diferentes quantidades
barplot(dados,col = c('red','blue','black'))
dados
# Construindo o plot - Stacked Bar Plot
# As 3 faixas de idade são representadas na mesma coluna para as diferentes quantidades
barplot(dados,col = c('red','blue','black'),legend.text = c('jovem','adulto','idoso'))
barplot(dados,col = c('red','blue','black'))
barplot(dados,col = c('red','blue','black'),legend.text = c('jovem','adulto','idoso')
barplot(dados,col = c('red','blue','black'),legend.text = c('jovem','adulto','idoso')
barplot(dados,col = c('red','blue','black'),legend.text = c('jovem','adulto','idoso'))
# Agora temos uma coluna para cada faixa etária, mas na mesma faixa de quantidade
barplot(dados,beside = T,col = c('red','blue','black'),legend.text = c('jovem','adulto','idoso'))
# Com a transposta da matriz, invertemos as posições entre faixa etária e faixa de quantidade
barplot(t(dados),beside = T,col = c('red','blue','black'),legend.text = c('jovem','adulto','idoso'))
# Com a transposta da matriz, invertemos as posições entre faixa etária e faixa de quantidade
barplot(t(dados),beside = T,col = c('red','blue','black','green'),legend.text = c('jovem','adulto','idoso'))
# Com a transposta da matriz, invertemos as posições entre faixa etária e faixa de quantidade
barplot(t(dados),beside = T,col = c('red','blue','black','green'))
# Com a transposta da matriz, invertemos as posições entre faixa etária e faixa de quantidade
barplot(t(dados),beside = T,col = c('red','blue','black','green'),legend.text = c('0','1-150','151-300','>300'))
# Criando fatias
fatias = c(40,20,40)
# Nomeando os labels
paises = c('Brasil','Argentina','Chile')
# Unindo fatias e países
paises = paste(paises,fatias)
paises
# Incluindo detalhes no label
paises = paste(paises,'%',sep = '')
paises
colors()
# Construindo um gráfico
pie(fatias,labels = paises,
col = c('darksalmon','gainsboro','lemonchiffon4'),
main = 'Distribuição de Vendas')
# Trabalhando com dataframes
attach(iris)
values = table(Species)
values
labels = paste(names(values))
pie(values,labels = labels,main = 'Distribuição de Espécies')
library(ggplot2)
# Plotando um gráfico básico com qplot()
data(tips,package = 'reshape2')
class(data)
data
qplot(total_bill,tip,data = tips,geom = 'point')
# Camada 1
camada1 <- geom_point(mappping = aes(x = total_bill,y = tip,color = sex),
data = tips,
size = 3)
# Camada 1
camada1 <- geom_point(mapping = aes(x = total_bill,y = tip,color = sex),
data = tips,
size = 3)
ggplot() + camada1
?aes
# Camada 2
modelo_base <- lm(tip ~ total_bill,data = tips,)
modelo_fit <- data.frame(
total_bill = tips$total_bill,
predict(moldelo_base,interval = 'confidence')
)
modelo_fit <- data.frame(
total_bill = tips$total_bill,
predict(modelo_base,interval = 'confidence')
)
head(modelo_fit)
# Camada 2
camda2 <- geom_line(mapping = aes(x = total_bill,y = fit),
data = modelo_fit,
color = 'darkred')
# Camada 2
camada2 <- geom_line(mapping = aes(x = total_bill,y = fit),
data = modelo_fit,
color = 'darkred')
ggplot() + camada1 + camada2
ggplot() + camada1 + camada2
# Camada 3
camada3 <- geom_ribbon(mapping = aes(x = total_bill,ymin = lwr,ymax = upr),
data = modelo_fit,
alpha = 0.3)
ggplot() + camada1 +camada2 + camada3
geom_smooth(method = 'lm')
# Versão final otimizada - Tudo o que foi feito com os comando anteriores, pode ser feito dessa forma
ggplot(tips,aes(x = total_bill,y = tip),
geom_point(aes(color = sex)) +
geom_smooth(method = 'lm'))
ggplot(tips,aes(x = total_bill,y = tip) +
geom_point(aes(color = sex)) +
geom_smooth(method = 'lm')
ggplot(tips,aes(x = total_bill,y = tip)) +
geom_point(aes(color = sex)) +
geom_smooth(method = 'lm')
ggplot(tips,aes(x = total_bill,y = tip)) +
geom_point(aes(color = sex)) +
geom_smooth(method - 'lm')
myplot <- ggplot(tips,aes(x = total_bill,y = tip)) +
geom_point(aes(color = sex)) +
geom_smooth(method - 'lm')
ggplot(tips,aes(x = total_bill,y = tip)) +
geom_point(aes(color = sex)) +
geom_smooth(method = 'lm')
# Gravando um gráfico em um objeto
myplot <- ggplot(tips,aes(x = total_bill,y = tip)) +
geom_point(aes(color = sex)) +
geom_smooth(method = 'lm')
class(myplot)
print(myplot)
myplot
data = data.frame(cond = rep(c('obs1','obs2'),
each = 10), var1 = 1:100 +
rnorm(100,sd = 9),var2 = 1:100 +
rnorm(100,sd = 16))
data
ggplot(data,aes(x = var1,y = var2),
geom_point(shape = 1) +
geom_smooth(method = lm,color = 'red',se = FALSE))
ggplot(data,aes(x = var1,y = var2)) +
geom_point(shape = 1) +
geom_smooth(method = lm,color = 'red',se = FALSE)
# Dados
data = data.frame(grupo = c('a','b','c','d'),
valor = c(33,62,56,67),
num_obs = c(100,500,459,342))
# Gerando a massa de dados
data$right = cumsum(data$num_obs) + 30 * c(0:(nrow(data)-1))
data$left = data$right - data$num_obs
data = data.frame(grupo = c('a','b','c','d'),
valor = c(33,62,56,67),
num_obs = c(100,500,459,342))
data$right = cumsum(data$num_obs) + 30 * c(0:(nrow(data)-1))
data$left = data$right - data$num_obs
# Plot
ggplot(data,aes(ymin = a)) +
geom_rect(aes(xmin = left,xmax = right,
ymax = valor,colour = grupo,fill = grupo)) +
xlab('Número de Observações') + ylab('valor')
# Plot
ggplot(data,aes(ymin = 0)) +
geom_rect(aes(xmin = left,xmax = right,
ymax = valor,colour = grupo,fill = grupo)) +
xlab('Número de Observações') + ylab('valor')
ggplot(data = mtcars,aes(x = disp,y = mpg)) + geom_point()
ggplot(data = mtcars,aes(x = disp,y = mpg,color = as.factor(am)))
+ geom_point()
# outro aspecto que pode ser mapeado nesse gráfico é a cor dos pontos
ggplot(data = mtcars,aes(x = disp,y = mpg,color = as.factor(am))) + geom_point()
library(lattice)
xyplot(data = iris, groups = Species, Sepal.Length ~ Petal.Length)
barchart(Class ~ Freq | Sex + Age, data = as.data.frame(Titanic),
groups = Survived, stack = T, layout = c(4,1),
auto.key = list(title = 'Dados Titanic', columns = 2))
# Contagem de elementos
PetalLength <- equal.count(iris$Petal.Length, 4)
PetalLength
library(ggplot2)
library(maps)
library(mapdata)
# Função para buscar coordenadas dos países
mapa <- map_data('world')
# Visualizando o dataframe
View(mapa)
dim(mapa)
# Gerando o mapa
ggplot() + geom_polygon(data = mapa, aes(x = long, y = lat,group = group)) +
coord_fixed(1.3)
ggplot() +
geom_polygon(data = mapa, aes(x = long, y = lat, group = group), fill = NA, color = 'blue') +
coord_fixed((1.3))
gg1 <- ggplot() +
geom_polygon(data = mapa, aes(x = long, y = lat, group = group), fill = 'seagreen1', color = 'blue') +
coord_fixed((1.3))
gg1
labs <- data.frame(
long = c(69.24140, -2.8456051),
lat = c(-78.38995, 22.44512),
names = c('Ponto1', 'Ponto2'),
stringsAsFactors = FALSE
)
gg1 +
geom_point(data = labs, aes(x = long, y = lat), color = 'black', size = 2) +
geom_point(data = labs, aes(x = long, y = lat), color = 'yellow', size = 2)
ggplot(data = mapa) +
geom_polygon(aes(x = long, y = lat, fill = region, group = group), color = 'white') +
coord_fixed(1.3) +
guides(fill = FALSE)
vec1 <- (10:13)
vec2 <- c("a", "b", "c", "d")
?cbind
func <- function(v1,v2){
df <- data.frame(v1,v2)
}
func(vec1,vec2)
func <- function(v1,v2){
df <- data.frame(v1,v2)
print(df)
}
func(vec1,vec2)
# Exercicio 2 - Crie uma matriz com 4 linhas e 4 colunas preenchida com
# números inteiros e calcule a média de cada linha
num <- (1:16)
num
mat <- matrix(num, nrow = 4, ncol = 4)
mat
?Random
runif()
runif(10)
runif(integer(10))
# média por linha
apply(mat,mean)
# média por linha
?apply
# média por linha
apply(mat,1,mean)
mat
escola <- data.frame(Aluno = c('Alan', 'Alice', 'Alana', 'Aline', 'Alex', 'Ajay'),
Matematica = c(90, 80, 85, 87, 56, 79),
Geografia = c(100, 78, 86, 90, 98, 67),
Quimica = c(76, 56, 89, 90, 100, 87))
escola
?tapply
tabela_basquete <- data.frame(equipe = gl(5,5,labels = paste('Equipe', LETTERS[1:5])),
jogador = sample(LETTERS,25),
num_cestas = floor(runif(25,min = 0,max = 50)))
View(tabela_basquete)
tapply(tabela_basquete$num_cestas,tabela_basquete$equipe,sum)
escola
# média por disciplina
tapply(escola$Matematica,mean)
# média por disciplina
escola$Matematica
# média por disciplina
sum(escola$Matematica)
# média por disciplina
sum(escola$Matematica) / length(escola$Matematica)
sum(escola$Geografia) / length(escola$Geografia)
sum(escola$Quimica) / length(escola$Quimica)
escola
# Exercicio 4 - Cria uma lista com 3 elementos, todos numéricos
# e calcule a soma de todos os elementos da lista
lst <- list(23,-4,0.9)
lst
sapply(lst,sum)
# lapply()
lista <- list(a = (1:10), b = (45:77))
lista
lapply(lista,sum)
sapply(lista,sum)
# Exercicio 4 - Cria uma lista com 3 elementos, todos numéricos
# e calcule a soma de todos os elementos da lista
lst <- list(a = 23,-4,0.9)
sapply(lst,sum)
lst
# Exercicio 4 - Cria uma lista com 3 elementos, todos numéricos
# e calcule a soma de todos os elementos da lista
lst <- list(a = (23,-4,0.9))
# Exercicio 4 - Cria uma lista com 3 elementos, todos numéricos
# e calcule a soma de todos os elementos da lista
lst <- list(a = (23-40.9))
lst
# Exercicio 4 - Cria uma lista com 3 elementos, todos numéricos
# e calcule a soma de todos os elementos da lista
lst <- list(a = (1:3))
lst
sapply(lst,sum)
# Exercicio 5 - Transforme a lista anterior um vetor
as.vector(lst)
# Exercicio 5 - Transforme a lista anterior um vetor
vec <- as.vector(lst)
vec
class(vec)
typeof(vec)
# Exercicio 5 - Transforme a lista anterior um vetor
vec <- unlist(lst)
typeof(vec)
vec
class(vec)
vec
?unlist
str <- c("Expressoes", "regulares", "em linguagem R",
"permitem a busca de padroes", "e exploracao de textos",
"podemos buscar padroes em digitos",
"como por exemplo",
"10992451280")
str
sub('textos','frases',str)
# Exercicio 7 - Usando o dataset mtcars, crie um gráfico com ggplot do tipo
# scatter plot. Use as colunas disp e mpg nos eixos x e y respectivamente
View(mtcars)
library(ggplot2)
# Plotando um gráfico básico com qplot()
data(tips,package = 'reshape2')
# Camada 1
camada1 <- geom_point(mapping = aes(x = total_bill,y = tip,color = sex),
data = tips,
size = 3)
ggplot() + camada1
mtcars
camada1 <- geom_point(mapping = aes(x = disp,y = mpg),
data = mtcars
size = 3)
camada1 <- geom_point(mapping = aes(x = disp,y = mpg),
data = mtcars,
size = 3)
ggplot() + camada1
camada1 <- geom_point(mapping = aes(x = disp,y = mpg),
color = cyl,
data = mtcars,
size = 3)
camada1 <- geom_point(mapping = aes(x = disp,y = mpg,color = cyl),
data = mtcars,
size = 3)
ggplot() + camada1
mat1 <- matrix(c(652,1537,598,242,36,46,38,21,218,327,106,67), nrow = 3, byrow = T)
mat1
barplot(mat1)
# Exercício 9 - Qual o erro do código abaixo?
data(diamonds)
ggplot(data = diamonds, aes(x = price, group = fill, fill = cut)) +
geom_density(adjust = 1.5)
View(data)
View(diamonds)
ggplot(data = diamonds, aes(x = price, fill = cut)) +
geom_density(adjust = 1.5)
ggplot(mtcars, aes(x = as.factor(cyl), fill = as.factor(cyl))) +
geom_barplot() +
labs(fill = "cyl")
ggplot(mtcars, aes(x = as.factor(cyl), fill = as.factor(cyl))) +
geom_rect() +
labs(fill = "cyl")
ggplot(mtcars, aes(x = as.factor(cyl), fill = as.factor(cyl))) +
geom_bar() +
labs(fill = "cyl")
escola <- data.frame(Aluno = c('Alan', 'Alice', 'Alana', 'Aline', 'Alex', 'Ajay'),
Matematica = c(90, 80, 85, 87, 56, 79),
Geografia = c(100, 78, 86, 90, 98, 67),
Quimica = c(76, 56, 89, 90, 100, 87))
escola
# utilizando apply
apply(escola, c[2,3,4], 2, mean)
# utilizando apply
apply(escola[, c[2,3,4], 2, mean)
# utilizando apply
apply(escola[,c(2,3,4)],2,mean)
# calculando a média de apenas uma disciplina
apply(escola[,c(2), drop = F],2,mean)
# Exercicio 4 - Cria uma lista com 3 elementos, todos numéricos
# e calcule a soma de todos os elementos da lista
lst <- list(a = 1:10, b = 1:5)
lst
sapply(lst,sum)
do.call(sum,lst)
mat1 <- matrix(c(652,1537,598,242,36,46,38,21,218,327,106,67), nrow = 3, byrow = T)
mat1
barplot(mat1, beside = T)
