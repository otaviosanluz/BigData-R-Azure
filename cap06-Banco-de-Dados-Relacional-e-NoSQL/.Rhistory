# e calcule a soma de todos os elementos da lista
lst <- list(a = (23-40.9))
lst
# Exercicio 4 - Cria uma lista com 3 elementos, todos numéricos
# e calcule a soma de todos os elementos da lista
lst <- list(a = (1:3))
lst
sapply(lst,sum)
# Exercicio 5 - Transforme a lista anterior um vetor
as.vector(lst)
# Exercicio 5 - Transforme a lista anterior um vetor
vec <- as.vector(lst)
vec
class(vec)
typeof(vec)
# Exercicio 5 - Transforme a lista anterior um vetor
vec <- unlist(lst)
typeof(vec)
vec
class(vec)
vec
?unlist
str <- c("Expressoes", "regulares", "em linguagem R",
"permitem a busca de padroes", "e exploracao de textos",
"podemos buscar padroes em digitos",
"como por exemplo",
"10992451280")
str
sub('textos','frases',str)
# Exercicio 7 - Usando o dataset mtcars, crie um gráfico com ggplot do tipo
# scatter plot. Use as colunas disp e mpg nos eixos x e y respectivamente
View(mtcars)
library(ggplot2)
# Plotando um gráfico básico com qplot()
data(tips,package = 'reshape2')
# Camada 1
camada1 <- geom_point(mapping = aes(x = total_bill,y = tip,color = sex),
data = tips,
size = 3)
ggplot() + camada1
mtcars
camada1 <- geom_point(mapping = aes(x = disp,y = mpg),
data = mtcars
size = 3)
camada1 <- geom_point(mapping = aes(x = disp,y = mpg),
data = mtcars,
size = 3)
ggplot() + camada1
camada1 <- geom_point(mapping = aes(x = disp,y = mpg),
color = cyl,
data = mtcars,
size = 3)
camada1 <- geom_point(mapping = aes(x = disp,y = mpg,color = cyl),
data = mtcars,
size = 3)
ggplot() + camada1
mat1 <- matrix(c(652,1537,598,242,36,46,38,21,218,327,106,67), nrow = 3, byrow = T)
mat1
barplot(mat1)
# Exercício 9 - Qual o erro do código abaixo?
data(diamonds)
ggplot(data = diamonds, aes(x = price, group = fill, fill = cut)) +
geom_density(adjust = 1.5)
View(data)
View(diamonds)
ggplot(data = diamonds, aes(x = price, fill = cut)) +
geom_density(adjust = 1.5)
ggplot(mtcars, aes(x = as.factor(cyl), fill = as.factor(cyl))) +
geom_barplot() +
labs(fill = "cyl")
ggplot(mtcars, aes(x = as.factor(cyl), fill = as.factor(cyl))) +
geom_rect() +
labs(fill = "cyl")
ggplot(mtcars, aes(x = as.factor(cyl), fill = as.factor(cyl))) +
geom_bar() +
labs(fill = "cyl")
escola <- data.frame(Aluno = c('Alan', 'Alice', 'Alana', 'Aline', 'Alex', 'Ajay'),
Matematica = c(90, 80, 85, 87, 56, 79),
Geografia = c(100, 78, 86, 90, 98, 67),
Quimica = c(76, 56, 89, 90, 100, 87))
escola
# utilizando apply
apply(escola, c[2,3,4], 2, mean)
# utilizando apply
apply(escola[, c[2,3,4], 2, mean)
# utilizando apply
apply(escola[,c(2,3,4)],2,mean)
# calculando a média de apenas uma disciplina
apply(escola[,c(2), drop = F],2,mean)
# Exercicio 4 - Cria uma lista com 3 elementos, todos numéricos
# e calcule a soma de todos os elementos da lista
lst <- list(a = 1:10, b = 1:5)
lst
sapply(lst,sum)
do.call(sum,lst)
mat1 <- matrix(c(652,1537,598,242,36,46,38,21,218,327,106,67), nrow = 3, byrow = T)
mat1
barplot(mat1, beside = T)
setwd('C:/Users/otavio/Mundo/Github/BigData-R-Azure/cap05-Manipulacao-Arquivos')
getwd()
# Pacote utils
search()
df1 <- read.table('pedidos.txt')
df1
dim(df1)
df1 <- read.table('pedidos.txt', header = T,sep = ',')
df1
dim(df1)
df1 <- read.table('pedidos.txt',header = T,sep = ',',col.names = ('var1','var2','var3'))
df1 <- read.table('pedidos.txt',header = T,sep = ',',col.names = c('var1','var2','var3'))
df1
str(df1)
df1 <- read.table('pedidos.txt',header = T,sep = ',',
col.names = c('var1','var2','var3'),na.strings = c('Zico','Maradona'))
df1
str(df1)
View(df1)
df1 <- read.table('pedidos.txt',header = T,sep = ',',
col.names = c('var1','var2','var3'),na.strings = c('Zico','Maradona'),
stringsAsFactors = F)
str(df1)
df2 <- read.csv('pedidos.txt')
df2
dim(df2)
df3 <- read.csv2('pedidos.txt',sep = ',')
df3
dim(df3)
df4 <- read.delim('pedidos.txt')
df4
df4 <- read.delim('pedidos.txt',sep = ',')
df4
dim(df4)
# Gerando arquivo
write.table(mtcars,file = 'mtcars.txt')
dir()
df_mtcars <- read.table('mtcars.txt')
df_mtcars
dim(df_mtcars)
write.table(mtcars,file = 'mtcars2.txt',sep = ',',
col.names = NA,qmethod = 'double')
list.files()
df_mtcars <- read_table('mtcars2.txt')
df_mtcars <- read.table('mtcars2.txt')
df_mtcars
df_mtcars2 <- read.table('mtcars2',sep = '|')
df_mtcars2 <- read.table('mtcars2.txt',sep = '|')
df_mtcars2
write.table(mtcars,file = 'mtcars2.txt',sep = '|',
col.names = NA,qmethod = 'double')
list.files()
read.table('mtcars2.txt')
df_mtcars <- read.table('mtcars2.txt')
df_mtcars
df_mtcars2 <- read.table('mtcars2.txt',sep = '|')
df_mtcars2
f_mtcars2 <- read.table('mtcars2.txt',sep = '|',encoding = 'UTF-8')
df_mtcars2
# Configurando o diretório de trabalho
# Coloque entre aspas o diretório de trabalho que você está usando no seu computador
# Não use diretórios com espaço no nome
setwd("C:/FCD/BigDataRAzure/Cap05")
# Configurando o diretório de trabalho
# Coloque entre aspas o diretório de trabalho que você está usando no seu computador
# Não use diretórios com espaço no nome
getwd()
# Exercicio 1 - Encontre e faça a correção do erro na instrução abaixo:
write.table(mtcars, file = "mtcars2.txt", sep = "|", col.names = N, qmethod = "double")
dir()
df <- read.csv('mtcars.txt')
View(df)
# Exercicio 1 - Encontre e faça a correção do erro na instrução abaixo:
write.table(mtcars, file = "mtcars2.txt", sep = "|", qmethod = "double")
# Exercicio 1 - Encontre e faça a correção do erro na instrução abaixo:
tb <- write.table(mtcars, file = "mtcars2.txt", sep = "|", qmethod = "double")
# Exercicio 1 - Encontre e faça a correção do erro na instrução abaixo:
tb <- write.table(mtcars, file = "mtcars2.txt", sep = "|", qmethod = "double")
View(tb)
# Exercicio 1 - Encontre e faça a correção do erro na instrução abaixo:
write.table(mtcars, file = "mtcars2.txt", sep = "|", col.names = NA, qmethod = "double")
# Exercicio 2 - Encontre e faça a correção do erro na instrução abaixo:
library(readr)
df_iris <- read_csv("iris.csv", col_types = matrix(
Sepal.Length = col_double(1),
Sepal.Width = col_double(1),
Petal.Length = col_double(1),
Petal.Width = col_double(1),
Species = col_factor(c("setosa", "versicolor", "virginica"))
))
library(readr)
df_iris <- read_csv("iris.csv", col_types = c(
Sepal.Length = col_double(1),
Sepal.Width = col_double(1),
Petal.Length = col_double(1),
Petal.Width = col_double(1),
Species = col_factor(c("setosa", "versicolor", "virginica"))
))
library(readr)
df_iris <- read_csv("iris.csv", col_types = c(
Sepal.Length = col_double(),
Sepal.Width = col_double(),
Petal.Length = col_double(),
Petal.Width = col_double(),
Species = col_factor(c("setosa", "versicolor", "virginica"))
))
df_iris <- read_csv("iris.csv", col_types = list(
Sepal.Length = col_double(),
Sepal.Width = col_double(),
Petal.Length = col_double(),
Petal.Width = col_double(),
Species = col_factor(c("setosa", "versicolor", "virginica"))
))
dataset1=rnorm(4000 , 100 , 30)
dataset2=rnorm(4000 , 200 , 30)
dataset1=rnorm(4000 , 100 , 30)
dataset2=rnorm(4000 , 200 , 30)
dataset1
hist(dataset1, breaks=30 , xlim=c(0,300) , col=rgb(1,0,0,0.5) , xlab="Altura" , ylab="Peso" , main="" )
hist(dataset1, breaks=30 , xlim=c(0,300) , col=rgb(1,0,0,0.5) , xlab="Altura" , ylab="Peso" , main="" )
?par
# Histogramas
#par(mfrow=c(1,2))
hist(dataset1, breaks=30 , xlim=c(0,300) , col=rgb(1,0,0,0.5) , xlab="Altura" , ylab="Peso" , main="" )
hist(dataset2, breaks=30 , xlim=c(0,300) , col=rgb(0,0,1,0.5) , xlab="Altura" , ylab="Peso" , main="")
par('lty')
par('pch')
par(mfrow = c(2,2), col.axis = 'red')
plot(1:8, las = 0, xlab = 'xlab', ylab = 'ylab', main = 'LAS = 0')
plot(1:8, las = 1, xlab = 'xlab', ylab = 'ylab', main = 'LAS = 1')
plot(1:8, las = 2, xlab = 'xlab', ylab = 'ylab', main = 'LAS = 2')
plot(1:8, las = 3, xlab = 'xlab', ylab = 'ylab', main = 'LAS = 3')
legend('topright', pch = 1, col = c('blue','red'), legend = c('var1','var2'))
par(mfrow = c(1,1))
par(mfrow=c(1,2))
hist(dataset1, breaks=30 , xlim=c(0,300) , col=rgb(1,0,0,0.5) , xlab="Altura" , ylab="Peso" , main="" )
hist(dataset2, breaks=30 , xlim=c(0,300) , col=rgb(0,0,1,0.5) , xlab="Altura" , ylab="Peso" , main="")
h1 <- hist(dataset1, breaks=30 , xlim=c(0,300) , col=rgb(1,0,0,0.5) , xlab="Altura" , ylab="Peso" , main="" )
h2 <- hist(dataset2, breaks=30 , xlim=c(0,300) , col=rgb(0,0,1,0.5) , xlab="Altura" , ylab="Peso" , main="")
plot(h1, main = 'Histogramas', xlab = 'x')
plot(h2, add = T)
plot(h1, main = 'Histogramas', xlab = 'x')
plot(h2)
h1$counts
plot(h1, main = 'Histogramas', xlab = 'x',ylim = 0,xlim = 500)
plot(h2,add = T)
plot(h1, main = 'Histogramas', xlab = 'x',ylim = 0,xlim = 500)
plot(h2,add = T)
plot(h1, main = 'Histogramas', xlab = 'x')
plot(h2,add = T)
plot(h1, main = 'Histogramas', xlab = 'x', col=rgb(1,0,0,0.5))
plot(h2,col = rgb(0,0,1,0.5),add = T)
hist(dataset2, breaks=30 , xlim=c(0,300) , col=rgb(0,0,1,0.5) , xlab="Altura" , ylab="Peso" , main="")
hist(dataset1, breaks=30 , xlim=c(0,300) , col=rgb(1,0,0,0.5) , xlab="Altura" , ylab="Peso" , main="" )
plot(h1, main = 'Histogramas', xlab = 'x', col=rgb(1,0,0,0.5),xlim = c(0,300))
plot(h2,col = rgb(0,0,1,0.5),add = T)
dataset1=rnorm(4000 , 100 , 30)
dataset2=rnorm(4000 , 200 , 30)
h1 <- hist(dataset1, breaks=30 , xlim=c(0,300) , col=rgb(1,0,0,0.5) , xlab="Altura" , ylab="Peso" , main="" )
h2 <- hist(dataset2, breaks=30 , xlim=c(0,300) , col=rgb(0,0,1,0.5) , xlab="Altura" , ylab="Peso" , main="")
plot(h1, main = 'Histogramas', xlab = 'x', col=rgb(1,0,0,0.5),xlim = c(0,300))
plot(h2,col = rgb(0,0,1,0.5),add = T)
plot(h1, main = 'Histogramas', xlab = 'Altura',ylab = 'Peso',col=rgb(1,0,0,0.5),xlim = c(0,300))
plot(h2,col = rgb(0,0,1,0.5),add = T)
dataset1=rnorm(4000 , 100 , 30)
dataset2=rnorm(4000 , 200 , 30)
h1 <- hist(dataset1, breaks=30 , xlim=c(0,300) , col=rgb(1,0,0,0.5) , xlab="Altura" , ylab="Peso" , main="" )
h2 <- hist(dataset2, breaks=30 , xlim=c(0,300) , col=rgb(0,0,1,0.5) , xlab="Altura" , ylab="Peso" , main="")
plot(h1, main = 'Histogramas', xlab = 'Altura',ylab = 'Peso',col=rgb(1,0,0,0.5),xlim = c(0,300))
plot(h2,col = rgb(0,0,1,0.5),add = T)
library(plotly)
head(iris)
head(iris)
plot_ly(iris,
x = ~Petal.Length,
y = ~Petal.Width,
type="scatter",
mode = "markers" ,
color = Species , marker=list(size=20 , opacity=0.5))
?plot_ly
plot_ly(iris,
x = ~Petal.Length,
y = ~Petal.Width,
type="scatter",
mode = "markers" ,
color = Species , marker=list(size=20 , opacity=0.5))
head(iris)
plot_ly(iris,
x = ~Petal.Length,
y = ~Petal.Width,
type="scatter",
mode = "markers" ,
marker=list(size=20 , opacity=0.5))
# Exercício 6 - Carregue o arquivo input.json anexo a este script e imprima o conteúdo no console
# Dica: Use o pacote rjson
library(rjson)
?rjson
json <- fromJSON(file = 'input.json')
json
print(json)
# Exercício 7 - Converta o objeto criado ao carregar o arquivo json do exercício anterior
# em um dataframe e imprima o conteúdo no console.
df <- data.frame(json)
df
View(df)
archive <- read.csv('input.csv',sep = ',')
archive
View(archive)
View(archive)
# Pergunta 1 - Quantas linhas e quantas colunas tem o objeto resultante em R?
length(archive)
# Pergunta 1 - Quantas linhas e quantas colunas tem o objeto resultante em R?
count(archive)
class(archive)
# Pergunta 1 - Quantas linhas e quantas colunas tem o objeto resultante em R?
nrow(archive)
# Pergunta 2 - Qual o maior salário?
?tapply
tapply(archive$salary,1,max)
tapply(archive$salary,2,max)
tapply(archive$salary,max)
# Pergunta 2 - Qual o maior salário?
by(archive,archive$salary,max)
str(archive)
apply(archive$salary,max)
# Pergunta 2 - Qual o maior salário?
max(archive$salary)
# Pergunta 2 - Qual o maior salário?
max(archive$salary)
str(archive)
max(archive$salary)
for i in archive$salaray{
print(i)
}
for i in archive$salaray{
print(i)
}
# Pergunta 3 - Imprima no console o registro da pessoa com o maior salário.
posicao <- which.max(archive[,salary])
# Pergunta 1 - Quantas linhas e quantas colunas tem o objeto resultante em R?
nrow(archive)
# Pergunta 3 - Imprima no console o registro da pessoa com o maior salário.
posicao <- which.max(archive[,'salary'])
posicao
pessoa_maior_salario <- archive[posicao, c('name','salary')]
pessoa_maior_salario
# Pergunta 4 - Imprima no console todas as pessoas que trabalham no departamento de IT.
archive[,c('IT')]
# Pergunta 4 - Imprima no console todas as pessoas que trabalham no departamento de IT.
archive[,]
# Pergunta 4 - Imprima no console todas as pessoas que trabalham no departamento de IT.
archive[,c('dpt') = 'IT']
# Pergunta 4 - Imprima no console todas as pessoas que trabalham no departamento de IT.
archive[,c('dpt')]
# Pergunta 4 - Imprima no console todas as pessoas que trabalham no departamento de IT.
archive[,c('dept')]
# Pergunta 4 - Imprima no console todas as pessoas que trabalham no departamento de IT.
archive[,c('dept') = 'IT']
# Pergunta 4 - Imprima no console todas as pessoas que trabalham no departamento de IT.
archive[,c('dept')]
# Criando um dataframe vazio
df <- data.frame()
class(df)
df
# Criando vetores vazios
nomes <- character()
idades <- numeric()
itens <- numeric()
codigos <- integer()
df <- data.frame(c(nomes,idades,itens,codigos))
df
# Criando vetores
pais = c('Portugal','Inglaterra','Irlanda','Egito','Brasil')
nome = c('Bruno','Maria','Tiago','Amanda','Bianca')
altura = c(1.75, 1.66, 1.90, 1.55, 1.73)
codigo = c(8890, 6788, 2233, 1411, 5566)
# criando um dataframe de diversos vetores
pesquisa = data.frame(pais, nome, altura, codigo)
pesquisa
# Adicionando um novo vetor a um dataframe existente
olhos = c('verde','azul','azul','castanho','verde')
pesq = cbind(pesquisa, olhos)
pesq
pesq[altura < 1.65, ]
pesq[altura < 1.65, c('codigo','olhos')]
# Pergunta 4 - Imprima no console todas as pessoas que trabalham no departamento de IT.
archive[,dept = 'IT']
archive <- read.csv('input.csv',sep = ',')
View(archive)
class(archive)
str(archive)
archive[,dept = 'IT']
# Pergunta 4 - Imprima no console todas as pessoas que trabalham no departamento de IT.
archive[,c('dept')]
# Pergunta 5 - Imprima no console as pessoas do departamento de IT com salário superior a 600.
archive[salary > 600,]
archive <- read.csv('input.csv',sep = ',')
posicao <- which.max(archive[,'salary']) # posição no dataframe do maior salário
posicao
pessoa_maior_salario <- archive[posicao, c('name','salary')]
pessoa_maior_salario
archive[salary > 600,]
IT <- subset(archive,dept == 'IT')
IT
pessoas <- subset(archive,dept = 'IT' & salary > 600)
pessoas
pessoas <- subset(archive,dept = 'IT' & salary > 600)
pessoas
# Pergunta 5 - Imprima no console as pessoas do departamento de IT com salário superior a 600.
pessoas <- subset(archive,salary > 600 & dept = 'IT')
# Pergunta 5 - Imprima no console as pessoas do departamento de IT com salário superior a 600.
pessoas <- subset(archive,salary > 600 & dept == 'IT')
pessoas
registro <- subset(archive,max(salary))
registro <- subset(archive,salary == max(salary))
registro
plot_ly(iris,
x = ~Petal.Length,
y = ~Petal.Width,
type="scatter",
mode = "markers" ,
xolor = ~Species
marker=list(size=20 , opacity=0.5))
plot_ly(iris,
x = ~Petal.Length,
y = ~Petal.Width,
type="scatter",
mode = "markers" ,
xolor = ~Species,
marker=list(size=20 , opacity=0.5))
plot_ly(iris,
x = ~Petal.Length,
y = ~Petal.Width,
type="scatter",
mode = "markers" ,
color = ~Species,
marker=list(size=20 , opacity=0.5))
json <- fromJSON(file = 'input.json')
df <- data.frame(json)
class(df)
setwd('C:\Users\otavio\Mundo\Github\BigData-R-Azure\cap06-Banco-de-Dados-Relacional-e-NoSQL')
setwd('C:/Users/otavio/Mundo/Github/BigData-R-Azure/cap06-Banco-de-Dados-Relacional-e-NoSQL')
getwd()
getwd()
library(RSQLite)
# Criando o driver e conexão ao banco de dados
drv = dbDriver('SQLite')
con = dbConnect(drv, dbname = 'exemplo.db')
dbListTables(con)
# Criando uma tabela e carregando os dados do dataset mtcars
dbWriteTable(con, 'mtcars', mtcars, row.names = T)
dbListTables(con)
dbExistsTable(con,'mtcars')
dbExistsTable(con,'mtcars2')
dbListFields(con,'mtcars')
# Lendo o conteúdo da tabela
dbReadTable(con,'mtcars')
# Criando apenas a definição da tabela
dbWriteTable(con,'mtcars2',mtcars[0, ],row.names = T)
dbListObjects(con)
dbReadTable(con,'mtcars2')
# Executando consultas no banco de dados
query = 'select row_names from mtcars'
rs = dbSendQuery(con,query)
dados = fetch(rs, n = -1)
dados
class(dados)
# Executando consultas no banco de dados
query = 'select row_names from mtcars'
rs = dbSendQuery(con,query)
while (!dbHasCompleted(rs))
{
dados = fetch(rs,n = -1)
print(dados$row_names)
}
# Executando consultas no banco de dados
query = 'select disp, hp from mtcars where disp > 160'
rs = dbSendQuery(con,query)
s = fetch(rs,n = -1)
dados
# Executando consultas no banco de dados
query = 'select disp, hp from mtcars where disp > 160'
rs = dbSendQuery(con,query)
dados = fetch(rs,n = -1)
dados
# Executando consultas no banco de dados
query = 'select row_names, avg(hp) from mtcars group by row_names'
rs = dbSendQuery(con,query)
dados = fetch(rs,n = -1)
dados
# Criando uma tabela a partir de um arquivo
dbWriteTable(con,'iris','iris.csv',sep = ',',header = T)
dbListTables(con)
dbReadTable(con,'iris')
# Encerrando a conexão
dbDisconnect(con)
# Criando driver e conexão ao banco de dados
drv = dbDriver('SQLite')
con = dbConnect(drv, dbname = 'exemplo.db')
dbWriteTable(con, 'indices', 'indice.csv',
sep = '|', header = T)
dbRemoveTable(con, 'indices')
dbWriteTable(con, 'indices', 'indice.csv',
sep = '|', header = T)
dbListTables(con)
dbReadTable(con, 'indices')
df <- dbReadTable(con, 'indices')
df
str(df)
sapply(df, class)
hist(df$setembro)
df_mean <- unlist(lapply(df[,c(4,5,6,7,8)], mean))
df_mean
dbDisconnect(con)
