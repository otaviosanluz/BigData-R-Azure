df4 <- read.delim('pedidos.txt')
df4
df4 <- read.delim('pedidos.txt',sep = ',')
df4
dim(df4)
# Gerando arquivo
write.table(mtcars,file = 'mtcars.txt')
dir()
df_mtcars <- read.table('mtcars.txt')
df_mtcars
dim(df_mtcars)
write.table(mtcars,file = 'mtcars2.txt',sep = ',',
col.names = NA,qmethod = 'double')
list.files()
df_mtcars <- read_table('mtcars2.txt')
df_mtcars <- read.table('mtcars2.txt')
df_mtcars
df_mtcars2 <- read.table('mtcars2',sep = '|')
df_mtcars2 <- read.table('mtcars2.txt',sep = '|')
df_mtcars2
write.table(mtcars,file = 'mtcars2.txt',sep = '|',
col.names = NA,qmethod = 'double')
list.files()
read.table('mtcars2.txt')
df_mtcars <- read.table('mtcars2.txt')
df_mtcars
df_mtcars2 <- read.table('mtcars2.txt',sep = '|')
df_mtcars2
f_mtcars2 <- read.table('mtcars2.txt',sep = '|',encoding = 'UTF-8')
df_mtcars2
# Configurando o diretório de trabalho
# Coloque entre aspas o diretório de trabalho que você está usando no seu computador
# Não use diretórios com espaço no nome
setwd("C:/FCD/BigDataRAzure/Cap05")
# Configurando o diretório de trabalho
# Coloque entre aspas o diretório de trabalho que você está usando no seu computador
# Não use diretórios com espaço no nome
getwd()
# Exercicio 1 - Encontre e faça a correção do erro na instrução abaixo:
write.table(mtcars, file = "mtcars2.txt", sep = "|", col.names = N, qmethod = "double")
dir()
df <- read.csv('mtcars.txt')
View(df)
# Exercicio 1 - Encontre e faça a correção do erro na instrução abaixo:
write.table(mtcars, file = "mtcars2.txt", sep = "|", qmethod = "double")
# Exercicio 1 - Encontre e faça a correção do erro na instrução abaixo:
tb <- write.table(mtcars, file = "mtcars2.txt", sep = "|", qmethod = "double")
# Exercicio 1 - Encontre e faça a correção do erro na instrução abaixo:
tb <- write.table(mtcars, file = "mtcars2.txt", sep = "|", qmethod = "double")
View(tb)
# Exercicio 1 - Encontre e faça a correção do erro na instrução abaixo:
write.table(mtcars, file = "mtcars2.txt", sep = "|", col.names = NA, qmethod = "double")
# Exercicio 2 - Encontre e faça a correção do erro na instrução abaixo:
library(readr)
df_iris <- read_csv("iris.csv", col_types = matrix(
Sepal.Length = col_double(1),
Sepal.Width = col_double(1),
Petal.Length = col_double(1),
Petal.Width = col_double(1),
Species = col_factor(c("setosa", "versicolor", "virginica"))
))
library(readr)
df_iris <- read_csv("iris.csv", col_types = c(
Sepal.Length = col_double(1),
Sepal.Width = col_double(1),
Petal.Length = col_double(1),
Petal.Width = col_double(1),
Species = col_factor(c("setosa", "versicolor", "virginica"))
))
library(readr)
df_iris <- read_csv("iris.csv", col_types = c(
Sepal.Length = col_double(),
Sepal.Width = col_double(),
Petal.Length = col_double(),
Petal.Width = col_double(),
Species = col_factor(c("setosa", "versicolor", "virginica"))
))
df_iris <- read_csv("iris.csv", col_types = list(
Sepal.Length = col_double(),
Sepal.Width = col_double(),
Petal.Length = col_double(),
Petal.Width = col_double(),
Species = col_factor(c("setosa", "versicolor", "virginica"))
))
dataset1=rnorm(4000 , 100 , 30)
dataset2=rnorm(4000 , 200 , 30)
dataset1=rnorm(4000 , 100 , 30)
dataset2=rnorm(4000 , 200 , 30)
dataset1
hist(dataset1, breaks=30 , xlim=c(0,300) , col=rgb(1,0,0,0.5) , xlab="Altura" , ylab="Peso" , main="" )
hist(dataset1, breaks=30 , xlim=c(0,300) , col=rgb(1,0,0,0.5) , xlab="Altura" , ylab="Peso" , main="" )
?par
# Histogramas
#par(mfrow=c(1,2))
hist(dataset1, breaks=30 , xlim=c(0,300) , col=rgb(1,0,0,0.5) , xlab="Altura" , ylab="Peso" , main="" )
hist(dataset2, breaks=30 , xlim=c(0,300) , col=rgb(0,0,1,0.5) , xlab="Altura" , ylab="Peso" , main="")
par('lty')
par('pch')
par(mfrow = c(2,2), col.axis = 'red')
plot(1:8, las = 0, xlab = 'xlab', ylab = 'ylab', main = 'LAS = 0')
plot(1:8, las = 1, xlab = 'xlab', ylab = 'ylab', main = 'LAS = 1')
plot(1:8, las = 2, xlab = 'xlab', ylab = 'ylab', main = 'LAS = 2')
plot(1:8, las = 3, xlab = 'xlab', ylab = 'ylab', main = 'LAS = 3')
legend('topright', pch = 1, col = c('blue','red'), legend = c('var1','var2'))
par(mfrow = c(1,1))
par(mfrow=c(1,2))
hist(dataset1, breaks=30 , xlim=c(0,300) , col=rgb(1,0,0,0.5) , xlab="Altura" , ylab="Peso" , main="" )
hist(dataset2, breaks=30 , xlim=c(0,300) , col=rgb(0,0,1,0.5) , xlab="Altura" , ylab="Peso" , main="")
h1 <- hist(dataset1, breaks=30 , xlim=c(0,300) , col=rgb(1,0,0,0.5) , xlab="Altura" , ylab="Peso" , main="" )
h2 <- hist(dataset2, breaks=30 , xlim=c(0,300) , col=rgb(0,0,1,0.5) , xlab="Altura" , ylab="Peso" , main="")
plot(h1, main = 'Histogramas', xlab = 'x')
plot(h2, add = T)
plot(h1, main = 'Histogramas', xlab = 'x')
plot(h2)
h1$counts
plot(h1, main = 'Histogramas', xlab = 'x',ylim = 0,xlim = 500)
plot(h2,add = T)
plot(h1, main = 'Histogramas', xlab = 'x',ylim = 0,xlim = 500)
plot(h2,add = T)
plot(h1, main = 'Histogramas', xlab = 'x')
plot(h2,add = T)
plot(h1, main = 'Histogramas', xlab = 'x', col=rgb(1,0,0,0.5))
plot(h2,col = rgb(0,0,1,0.5),add = T)
hist(dataset2, breaks=30 , xlim=c(0,300) , col=rgb(0,0,1,0.5) , xlab="Altura" , ylab="Peso" , main="")
hist(dataset1, breaks=30 , xlim=c(0,300) , col=rgb(1,0,0,0.5) , xlab="Altura" , ylab="Peso" , main="" )
plot(h1, main = 'Histogramas', xlab = 'x', col=rgb(1,0,0,0.5),xlim = c(0,300))
plot(h2,col = rgb(0,0,1,0.5),add = T)
dataset1=rnorm(4000 , 100 , 30)
dataset2=rnorm(4000 , 200 , 30)
h1 <- hist(dataset1, breaks=30 , xlim=c(0,300) , col=rgb(1,0,0,0.5) , xlab="Altura" , ylab="Peso" , main="" )
h2 <- hist(dataset2, breaks=30 , xlim=c(0,300) , col=rgb(0,0,1,0.5) , xlab="Altura" , ylab="Peso" , main="")
plot(h1, main = 'Histogramas', xlab = 'x', col=rgb(1,0,0,0.5),xlim = c(0,300))
plot(h2,col = rgb(0,0,1,0.5),add = T)
plot(h1, main = 'Histogramas', xlab = 'Altura',ylab = 'Peso',col=rgb(1,0,0,0.5),xlim = c(0,300))
plot(h2,col = rgb(0,0,1,0.5),add = T)
dataset1=rnorm(4000 , 100 , 30)
dataset2=rnorm(4000 , 200 , 30)
h1 <- hist(dataset1, breaks=30 , xlim=c(0,300) , col=rgb(1,0,0,0.5) , xlab="Altura" , ylab="Peso" , main="" )
h2 <- hist(dataset2, breaks=30 , xlim=c(0,300) , col=rgb(0,0,1,0.5) , xlab="Altura" , ylab="Peso" , main="")
plot(h1, main = 'Histogramas', xlab = 'Altura',ylab = 'Peso',col=rgb(1,0,0,0.5),xlim = c(0,300))
plot(h2,col = rgb(0,0,1,0.5),add = T)
library(plotly)
head(iris)
head(iris)
plot_ly(iris,
x = ~Petal.Length,
y = ~Petal.Width,
type="scatter",
mode = "markers" ,
color = Species , marker=list(size=20 , opacity=0.5))
?plot_ly
plot_ly(iris,
x = ~Petal.Length,
y = ~Petal.Width,
type="scatter",
mode = "markers" ,
color = Species , marker=list(size=20 , opacity=0.5))
head(iris)
plot_ly(iris,
x = ~Petal.Length,
y = ~Petal.Width,
type="scatter",
mode = "markers" ,
marker=list(size=20 , opacity=0.5))
# Exercício 6 - Carregue o arquivo input.json anexo a este script e imprima o conteúdo no console
# Dica: Use o pacote rjson
library(rjson)
?rjson
json <- fromJSON(file = 'input.json')
json
print(json)
# Exercício 7 - Converta o objeto criado ao carregar o arquivo json do exercício anterior
# em um dataframe e imprima o conteúdo no console.
df <- data.frame(json)
df
View(df)
archive <- read.csv('input.csv',sep = ',')
archive
View(archive)
View(archive)
# Pergunta 1 - Quantas linhas e quantas colunas tem o objeto resultante em R?
length(archive)
# Pergunta 1 - Quantas linhas e quantas colunas tem o objeto resultante em R?
count(archive)
class(archive)
# Pergunta 1 - Quantas linhas e quantas colunas tem o objeto resultante em R?
nrow(archive)
# Pergunta 2 - Qual o maior salário?
?tapply
tapply(archive$salary,1,max)
tapply(archive$salary,2,max)
tapply(archive$salary,max)
# Pergunta 2 - Qual o maior salário?
by(archive,archive$salary,max)
str(archive)
apply(archive$salary,max)
# Pergunta 2 - Qual o maior salário?
max(archive$salary)
# Pergunta 2 - Qual o maior salário?
max(archive$salary)
str(archive)
max(archive$salary)
for i in archive$salaray{
print(i)
}
for i in archive$salaray{
print(i)
}
# Pergunta 3 - Imprima no console o registro da pessoa com o maior salário.
posicao <- which.max(archive[,salary])
# Pergunta 1 - Quantas linhas e quantas colunas tem o objeto resultante em R?
nrow(archive)
# Pergunta 3 - Imprima no console o registro da pessoa com o maior salário.
posicao <- which.max(archive[,'salary'])
posicao
pessoa_maior_salario <- archive[posicao, c('name','salary')]
pessoa_maior_salario
# Pergunta 4 - Imprima no console todas as pessoas que trabalham no departamento de IT.
archive[,c('IT')]
# Pergunta 4 - Imprima no console todas as pessoas que trabalham no departamento de IT.
archive[,]
# Pergunta 4 - Imprima no console todas as pessoas que trabalham no departamento de IT.
archive[,c('dpt') = 'IT']
# Pergunta 4 - Imprima no console todas as pessoas que trabalham no departamento de IT.
archive[,c('dpt')]
# Pergunta 4 - Imprima no console todas as pessoas que trabalham no departamento de IT.
archive[,c('dept')]
# Pergunta 4 - Imprima no console todas as pessoas que trabalham no departamento de IT.
archive[,c('dept') = 'IT']
# Pergunta 4 - Imprima no console todas as pessoas que trabalham no departamento de IT.
archive[,c('dept')]
# Criando um dataframe vazio
df <- data.frame()
class(df)
df
# Criando vetores vazios
nomes <- character()
idades <- numeric()
itens <- numeric()
codigos <- integer()
df <- data.frame(c(nomes,idades,itens,codigos))
df
# Criando vetores
pais = c('Portugal','Inglaterra','Irlanda','Egito','Brasil')
nome = c('Bruno','Maria','Tiago','Amanda','Bianca')
altura = c(1.75, 1.66, 1.90, 1.55, 1.73)
codigo = c(8890, 6788, 2233, 1411, 5566)
# criando um dataframe de diversos vetores
pesquisa = data.frame(pais, nome, altura, codigo)
pesquisa
# Adicionando um novo vetor a um dataframe existente
olhos = c('verde','azul','azul','castanho','verde')
pesq = cbind(pesquisa, olhos)
pesq
pesq[altura < 1.65, ]
pesq[altura < 1.65, c('codigo','olhos')]
# Pergunta 4 - Imprima no console todas as pessoas que trabalham no departamento de IT.
archive[,dept = 'IT']
archive <- read.csv('input.csv',sep = ',')
View(archive)
class(archive)
str(archive)
archive[,dept = 'IT']
# Pergunta 4 - Imprima no console todas as pessoas que trabalham no departamento de IT.
archive[,c('dept')]
# Pergunta 5 - Imprima no console as pessoas do departamento de IT com salário superior a 600.
archive[salary > 600,]
archive <- read.csv('input.csv',sep = ',')
posicao <- which.max(archive[,'salary']) # posição no dataframe do maior salário
posicao
pessoa_maior_salario <- archive[posicao, c('name','salary')]
pessoa_maior_salario
archive[salary > 600,]
IT <- subset(archive,dept == 'IT')
IT
pessoas <- subset(archive,dept = 'IT' & salary > 600)
pessoas
pessoas <- subset(archive,dept = 'IT' & salary > 600)
pessoas
# Pergunta 5 - Imprima no console as pessoas do departamento de IT com salário superior a 600.
pessoas <- subset(archive,salary > 600 & dept = 'IT')
# Pergunta 5 - Imprima no console as pessoas do departamento de IT com salário superior a 600.
pessoas <- subset(archive,salary > 600 & dept == 'IT')
pessoas
registro <- subset(archive,max(salary))
registro <- subset(archive,salary == max(salary))
registro
plot_ly(iris,
x = ~Petal.Length,
y = ~Petal.Width,
type="scatter",
mode = "markers" ,
xolor = ~Species
marker=list(size=20 , opacity=0.5))
plot_ly(iris,
x = ~Petal.Length,
y = ~Petal.Width,
type="scatter",
mode = "markers" ,
xolor = ~Species,
marker=list(size=20 , opacity=0.5))
plot_ly(iris,
x = ~Petal.Length,
y = ~Petal.Width,
type="scatter",
mode = "markers" ,
color = ~Species,
marker=list(size=20 , opacity=0.5))
json <- fromJSON(file = 'input.json')
df <- data.frame(json)
class(df)
setwd('C:\Users\otavio\Mundo\Github\BigData-R-Azure\cap06-Banco-de-Dados-Relacional-e-NoSQL')
setwd('C:/Users/otavio/Mundo/Github/BigData-R-Azure/cap06-Banco-de-Dados-Relacional-e-NoSQL')
getwd()
getwd()
library(RSQLite)
# Criando o driver e conexão ao banco de dados
drv = dbDriver('SQLite')
con = dbConnect(drv, dbname = 'exemplo.db')
dbListTables(con)
# Criando uma tabela e carregando os dados do dataset mtcars
dbWriteTable(con, 'mtcars', mtcars, row.names = T)
dbListTables(con)
dbExistsTable(con,'mtcars')
dbExistsTable(con,'mtcars2')
dbListFields(con,'mtcars')
# Lendo o conteúdo da tabela
dbReadTable(con,'mtcars')
# Criando apenas a definição da tabela
dbWriteTable(con,'mtcars2',mtcars[0, ],row.names = T)
dbListObjects(con)
dbReadTable(con,'mtcars2')
# Executando consultas no banco de dados
query = 'select row_names from mtcars'
rs = dbSendQuery(con,query)
dados = fetch(rs, n = -1)
dados
class(dados)
# Executando consultas no banco de dados
query = 'select row_names from mtcars'
rs = dbSendQuery(con,query)
while (!dbHasCompleted(rs))
{
dados = fetch(rs,n = -1)
print(dados$row_names)
}
# Executando consultas no banco de dados
query = 'select disp, hp from mtcars where disp > 160'
rs = dbSendQuery(con,query)
s = fetch(rs,n = -1)
dados
# Executando consultas no banco de dados
query = 'select disp, hp from mtcars where disp > 160'
rs = dbSendQuery(con,query)
dados = fetch(rs,n = -1)
dados
# Executando consultas no banco de dados
query = 'select row_names, avg(hp) from mtcars group by row_names'
rs = dbSendQuery(con,query)
dados = fetch(rs,n = -1)
dados
# Criando uma tabela a partir de um arquivo
dbWriteTable(con,'iris','iris.csv',sep = ',',header = T)
dbListTables(con)
dbReadTable(con,'iris')
# Encerrando a conexão
dbDisconnect(con)
# Criando driver e conexão ao banco de dados
drv = dbDriver('SQLite')
con = dbConnect(drv, dbname = 'exemplo.db')
dbWriteTable(con, 'indices', 'indice.csv',
sep = '|', header = T)
dbRemoveTable(con, 'indices')
dbWriteTable(con, 'indices', 'indice.csv',
sep = '|', header = T)
dbListTables(con)
dbReadTable(con, 'indices')
df <- dbReadTable(con, 'indices')
df
str(df)
sapply(df, class)
hist(df$setembro)
df_mean <- unlist(lapply(df[,c(4,5,6,7,8)], mean))
df_mean
dbDisconnect(con)
getwd()
setwd('C:/Users/otavio/Mundo/Github/BigData-R-Azure/cap07-Manipulacao-Dados')
getwd()
# Carregando os pacotes
library(readr)
library(dplyr)
sono_df <- read_csv('sono.csv')
View(sono_df)
str(sono_df)
head(sono_df)
class(sono_df)
# Função glimpse() pode ser usada no lugar da função str()
glimpse(sono_df)
# Aplicando mutate()
glimpse(mutate(sono_df, peso_libras = sono_total / 0.45359237))
View(sono_df)
# Contagem e histograma
count(sono_df, cidade)
hist(sono_df$sono_total)
# Amostragem
sample_n(sono_df, size = 10)
# select()
sleepData <- select(sono_df, nome, sono_total)
head(sleepData)
class(sleepData)
select(sono_df, nome:cidade) #
select(sono_df, nome:pais) # retorna todas as colunas de nome até cidade - range de colunas
# filter()
filter(sono_df, sono_total >= 16)
filter(sono_df, sono_total >= 16, peso >= 80)
filter(sono_df, cidade %in% c('Recife', 'Curitiba'))
# arrange()
sono_df %>% arrange(cidade) %>% head
sono_df %>%
select(nome, cidade, sono_total)
arrange(cidade, sono_total) %>%
head
sono_df %>%
select(nome, cidade, sono_total) %>%
arrange(cidade, sono_total) %>%
head
sono_df %>%
select(nome, cidade, sono_total) %>%
arrange(cidade) %>%
head
sono_df %>%
select(nome, cidade, sono_total) %>%
arrange(cidade, sono_total) %>%
filter(sono_total >= 16)
# mutate()
sono_df %>%
mutate(novo_indice = sono_total / peso) %>%
head
sono_df %>%
mutate(novo_indice = sono_total / peso) %>%
head
head(sono_df)
sono_df %>%
mutate(novo_inidice = sono_total / peso,
peso_libras = peso / 0.453592) %>%
head
sono_df %>%
mutate(novo_inidice = sono_total / peso,
peso_libras = peso / 0.453592) %>%
head
# summarize() - resumo de algo
sono_df %>%
summarise(media_sono = mean(sono_total))
sono_df %>%
summarise(media_sono = mean(sono_total),
min_sono = min(sono_total),
max_sono = max(sono_total),
total = n())
sono_df %>%
group_by(cidade) %>%
summarise(media_sono = mean(sono_total),
min_sono = min(sono_total),
max_sono = max(sono_total),
total = n())
sono_df %>%
select(nome, sono_total) %>%
head
head(select(sono_df, nome, sono_total))
sono_df %>%
mutate(novo_inidice = round(sono_total * peso)) %>%
arrange(desc(novo_inidice)) %>%
select(cidade, novo_inidice)
getwd()
getwd()
# Instalando o pacote hflights (dados de voos de Houston)
install.packages('hflights')
library(hflights)
# Criando um obejto tbl
?tbl_df
flights <- tbl_df(hflights)
View(flights)
# Resumindo os dados
str(flights)
glimpse(flights)
# Visualizando como dataframe
data.frame(head(flights))
# Filtrando dados com slice
flights[flights$Month == 1 & flights$DayofMonth == 1, ]
# Aplicando filter
filter(flights, Month = 1, DayofMonth = 1)
# Aplicando filter
filter(flights, Month == 1, DayofMonth == 1)
filter(flights, UniqueCarrier == 'AA' | UniqueCarrier == 'UA')
filter(flights, UniqueCarrier %>% c('AA','UA'))
filter(flights, UniqueCarrier %in% c('AA','UA'))
# select
select(flights, Year:DayofMonth, contains('Taxi'), contains('Delay'))
# Organizando os dados
flights %>%
select(UniqueCarrier, DepDelay) %>%
arrange(DepDelay)
flights %>%
select(Distance, AirTime) %>%
mutate(Speed = Distance/Airtime*60)
flights %>%
select(Distance, AirTime) %>%
mutate(Speed = Distance/AirTime*60)
head(with(flights, tapply(ArrDelay, Dest, mean, na.rm = T)))
head(aggregate(ArrDelay ~ Dest, flights, mean))
flights %>%
group_by(Month, DayofMonth) %>%
tally(sort = T)
