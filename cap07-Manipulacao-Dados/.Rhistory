getwd()
setwd('C:/Users/otavio/Mundo/Github/BigData-R-Azure/cap07-Manipulacao-Dados')
getwd()
# Pivot (transposta da matriz)
mtcars
t(mtcars)
library(lattice)
iris_modif
iris_modif <- reshape(iris,
varying = 1:4,
v.names = 'medidas',
timevar = 'dimensoes',
times = names(iris)[1:4],
idvar = 'ID',
direction = 'long')
head(iris_modif)
View(iris_modif)
bwplot(medidas ~ Species | dimensoes, data = iris_modif)
iris_modif_sp <- reshape(iris,
varying = list(c(1,3),c(2,4)),
v.names = c('Comprimento','Largura'),
timevar = 'Parte',
times = c('Sepal','Petal'),
idvar = 'ID',
direction = 'long')
head(iris_modif_sp)
View(iris_modif_sp)
xyplot(Comprimento ~ Largura | Species, groups = Parte,
data = iris_modif_sp, auto.key = list(space = 'right'))
xyplot(Comprimento ~ Largura | Parte, groups = Species,
data = iris_modif_sp, auto.key = list(space = 'right'))
library(reshape2)
df = data.frame(nome = c("Zico", "Pele"),
chuteira = c(40, 42),
idade = c(34,NA),
peso = c(93, NA),
altura = c(175, 178))
df
# "Derretendo" o DataFrame - função melt()
df_wide <- melt(df, id = c('nome','chuteira'))
df_wide
# Removendo NA
df_wide <- melt(df, id = c('nome','chuteira'), na.rm = T)
df_wide
# Removendo NA
df_wide <- melt(df, id = c('nome','chuteira'), na.rm = T)
df_wide
getwd()
library(plyr)
library(gapminder)
View(gapminder)
df <- ddply(gapminder ~ continent,
summarise,
max_le = max(lifeExp))
df <- ddply(gapminder ~ continent,
summarise,
max_le = max(lifeExp))
df <- ddply(gapminder, ~ continent,
summarise,
max_le = max(lifeExp))
str(df)
head(df)
levels(df$continent)
# Split-Apply-Combine
ddply(gapminder, ~ continent,
summarise,
n_uniq_countries = length(unique(country)))
View(gapminder)
ddply(gapminder, ~ continet,
function(x) c(c_uniq_countries = length(unique(x$country))))
ddply(gapminder, ~ continent,
summarise,
min = min(lifeExp),
max = max(lifeExp),
median = median(lifeExp))
# Usando um dataset do ggplot
library(ggplot2)
data(mpg)
str(mpg)
# Trabalhando com um subset do dataset
data <- mpg[ ,c(1,7:9)]
View(data)
View(data)
# Sumarizando e agregando os dados
ddply(data, .(manufacturer),
summarize,
avgcty = mean(cty))
# Várias funções eum uma única chamda
ddply(data, .(manufacturer),
summarize,
avgcty = mean(cty),
sd = sd(cty),
max = max(cty))
# Sumarizando os dados pela combinação de variáveis/fatores
ddply(data, .(manufacturer, drv),
summarize,
avgcty = mean(cty),
sd = sd(cty),
max = max(cty))
library(data.table)
vec2 <- c('vermelho','verde','marrom','laranja')
# Criando 2 vetores
vec1 <- c(1,2,3,4)
dt1 <- data.table(vec1,vec2)
dt1
class(dt1)
# Slicing do data.table
dt2 <- data.table(A = 1:9, B = c('Z','W','Q'), C = rnorm(9), D = T)
dt2
dt2[3:5, ]
dt2[ , .(B, C)]
dt2[ , (B, C)]
dt2[ , .(B, C)]
# Aplicando uma função ao data.table
dt2[ , .(Total = sum(A), Mean = mean(C))]
dt2[ , plot(A,C)]
dt2[ , .(mysum = sum(A), by = .(Grp = A%%2))]
dt2[ , .(mysum = sum(A)), by = .(Grp = A%%2)]
# Definindo valores por grupos
dt3 <- data.table(B = c("a", "b", "c", "d", "e", "a", "b", "c", "d", "e"),
val = as.integer(c(6:10, 1:5)))
dt3
# Operações com data.tables
dt4 <- data.table(A = rep(letters[2:1], each = 4L),
B = rep(1:4, each = 2L),
C = sample(8))
dt4
new_dt4 <- dt4[, sum(C), by = A]
new_dt4
class(new_dt4)
new_dt4[order(A)]
new_dt4 <- dt4[, sum(B), by = A][order(A)]
new_dt4
# Iris
dt5 <- as.data.table(iris)
# Iris
dt5 <- as.data.table(iris)
dt5
dt5[, .(Sepal.Length = median(Sepal.Length),
Sepal.Width = median(Sepal.Width),
Petal.Length = median(Petal.Length),
Petal.Width = median(Petal.Width)),
by = Species]
dt5[, .(Sepal.Length = median(Sepal.Length),
Sepal.Width = median(Sepal.Width),
Petal.Length = median(Petal.Length),
Petal.Width = median(Petal.Width)),
by = Species]
# O parâmetro .SD significa Subset Data e um subset é criado considerando a coluna Species e depois
# é calculada a mediana. O resultado deve ser igual ao comando anterior.
# O .SD faz parte da notação do pacote data.table.
dt5[, lapply(.SD, median), by = Species]
