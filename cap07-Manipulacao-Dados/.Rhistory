getwd()
setwd('C:/Users/otavio/Mundo/Github/BigData-R-Azure/cap07-Manipulacao-Dados')
getwd()
# Pivot (transposta da matriz)
mtcars
t(mtcars)
library(lattice)
iris_modif
iris_modif <- reshape(iris,
varying = 1:4,
v.names = 'medidas',
timevar = 'dimensoes',
times = names(iris)[1:4],
idvar = 'ID',
direction = 'long')
head(iris_modif)
View(iris_modif)
bwplot(medidas ~ Species | dimensoes, data = iris_modif)
iris_modif_sp <- reshape(iris,
varying = list(c(1,3),c(2,4)),
v.names = c('Comprimento','Largura'),
timevar = 'Parte',
times = c('Sepal','Petal'),
idvar = 'ID',
direction = 'long')
head(iris_modif_sp)
View(iris_modif_sp)
xyplot(Comprimento ~ Largura | Species, groups = Parte,
data = iris_modif_sp, auto.key = list(space = 'right'))
xyplot(Comprimento ~ Largura | Parte, groups = Species,
data = iris_modif_sp, auto.key = list(space = 'right'))
library(reshape2)
df = data.frame(nome = c("Zico", "Pele"),
chuteira = c(40, 42),
idade = c(34,NA),
peso = c(93, NA),
altura = c(175, 178))
df
# "Derretendo" o DataFrame - função melt()
df_wide <- melt(df, id = c('nome','chuteira'))
df_wide
# Removendo NA
df_wide <- melt(df, id = c('nome','chuteira'), na.rm = T)
df_wide
# Removendo NA
df_wide <- melt(df, id = c('nome','chuteira'), na.rm = T)
df_wide
getwd()
library(plyr)
library(gapminder)
View(gapminder)
df <- ddply(gapminder ~ continent,
summarise,
max_le = max(lifeExp))
df <- ddply(gapminder ~ continent,
summarise,
max_le = max(lifeExp))
df <- ddply(gapminder, ~ continent,
summarise,
max_le = max(lifeExp))
str(df)
head(df)
levels(df$continent)
# Split-Apply-Combine
ddply(gapminder, ~ continent,
summarise,
n_uniq_countries = length(unique(country)))
View(gapminder)
ddply(gapminder, ~ continet,
function(x) c(c_uniq_countries = length(unique(x$country))))
ddply(gapminder, ~ continent,
summarise,
min = min(lifeExp),
max = max(lifeExp),
median = median(lifeExp))
# Usando um dataset do ggplot
library(ggplot2)
data(mpg)
str(mpg)
# Trabalhando com um subset do dataset
data <- mpg[ ,c(1,7:9)]
View(data)
View(data)
# Sumarizando e agregando os dados
ddply(data, .(manufacturer),
summarize,
avgcty = mean(cty))
# Várias funções eum uma única chamda
ddply(data, .(manufacturer),
summarize,
avgcty = mean(cty),
sd = sd(cty),
max = max(cty))
# Sumarizando os dados pela combinação de variáveis/fatores
ddply(data, .(manufacturer, drv),
summarize,
avgcty = mean(cty),
sd = sd(cty),
max = max(cty))
library(data.table)
vec2 <- c('vermelho','verde','marrom','laranja')
# Criando 2 vetores
vec1 <- c(1,2,3,4)
dt1 <- data.table(vec1,vec2)
dt1
class(dt1)
# Slicing do data.table
dt2 <- data.table(A = 1:9, B = c('Z','W','Q'), C = rnorm(9), D = T)
dt2
dt2[3:5, ]
dt2[ , .(B, C)]
dt2[ , (B, C)]
dt2[ , .(B, C)]
# Aplicando uma função ao data.table
dt2[ , .(Total = sum(A), Mean = mean(C))]
dt2[ , plot(A,C)]
dt2[ , .(mysum = sum(A), by = .(Grp = A%%2))]
dt2[ , .(mysum = sum(A)), by = .(Grp = A%%2)]
# Definindo valores por grupos
dt3 <- data.table(B = c("a", "b", "c", "d", "e", "a", "b", "c", "d", "e"),
val = as.integer(c(6:10, 1:5)))
dt3
# Operações com data.tables
dt4 <- data.table(A = rep(letters[2:1], each = 4L),
B = rep(1:4, each = 2L),
C = sample(8))
dt4
new_dt4 <- dt4[, sum(C), by = A]
new_dt4
class(new_dt4)
new_dt4[order(A)]
new_dt4 <- dt4[, sum(B), by = A][order(A)]
new_dt4
# Iris
dt5 <- as.data.table(iris)
# Iris
dt5 <- as.data.table(iris)
dt5
dt5[, .(Sepal.Length = median(Sepal.Length),
Sepal.Width = median(Sepal.Width),
Petal.Length = median(Petal.Length),
Petal.Width = median(Petal.Width)),
by = Species]
dt5[, .(Sepal.Length = median(Sepal.Length),
Sepal.Width = median(Sepal.Width),
Petal.Length = median(Petal.Length),
Petal.Width = median(Petal.Width)),
by = Species]
# O parâmetro .SD significa Subset Data e um subset é criado considerando a coluna Species e depois
# é calculada a mediana. O resultado deve ser igual ao comando anterior.
# O .SD faz parte da notação do pacote data.table.
dt5[, lapply(.SD, median), by = Species]
getwd()
# Vetores
x <- c('a','b','c','d','e')
x[]
x
# Índices positivos - elementos em posições específicas
x[c(1,3)]
x[1,2]
x[c(1,1)]
x[order(x)]
# Índices negativos - Ignora elementos em posições específicas
x[-c(1,3)]
x[-c(1,4)]
# Vetor lógico para gerar subsetting
x[c(T,F)]
x[c(T,F,T,F)]
# Vetor de caracteres
y <- setNames(x, letters[1:4])
y
?setNames
class(y)
# Vetor de caracteres
x <- c('A','B','C','D')
y <- setNames(x, letters[1:4])
y
y[c('d','c','a')]
y[c('a','a','a')]
# Matrizes
mat <- matrix(1:9, nrow = 3)
colnames(mat) <- c('A','B','C')
mat[1:2, ]
mat[1:2,2:3]
vals <- outer(1:5, 1:5, FUN = 'paste', sep = ',')
vals
vals[c(4,15)]
# DataFrames
df <- data.frame(x = 1:3, y = 3:1, z = letters[1:3])
df
df$x
df[df$x == 2]
df[df$x == 2, ]
df[c(1,3), ]
# DataFrames
df <- data.frame(x = 1:3, y = 3:1, z = letters[1:3])
df
df$x
df[df$x == 2, ]
df[c(1,3), ]
df[c(1:3), ]
df[c(1,3), ]
df[c('x','z')]
df[ ,c('x','z')]
str(df['x'])
str(df)
str(df[ ,'x'])
# Removendo colunas do DataFrame
df <- data.frame(x = 1:3, y = 3:1, z = letters[1:3])
df
df$z <- NULL
df
# Operadores [], [[]], $
a <- list(x = 1:3, y = 4:5)
a
a[1]
a[[1]]
a[[1]][[1]]
a[['x']]
b <- list(a = list(b = list(c = list(d = 1))))
b
b[[c('a','b','c','d')]]
b[['a']][['b']][['c']][['d']]
# x$y é equivalente a x[['y', exact = F]]
var <- 'cyl'
mtcars$var
View(mtcars)
mtcars[[var]]
x <- list(abc = 1)
x
x$a
x[['a']]
x[a]
x$b
x$abc
# Subsetting e atribuição
x <- 1:5
x
x[c(1,2)] <- 2:3
x
x[-1]
x[-1] <- 4:1
x
# Isso é subsetting
head(mtcars)
mtcars[]
mtcars[] <- lapply(mtcars, as.integer)
# Isso é subsetting
head(mtcars)
mtcars[] <- lapply(mtcars, as.integer)
head(mtcars)
# Isso é subsetting
head(mtcars)
mtcars[] <- lapply(mtcars, as.integer)
head(mtcars)
# Isso não é subsetting
mtcars <- lapply(mtcars, as.integer)
head(mtcars)
# Lookup tables
x <- c('m','f','u','f','f','m','m')
('m','f','u','f','f','m','m')
x
# Lookup tables
x <- c('m','f','u','f','f','m','m')
x
lookup <- c(m = 'MAle', f = 'female', u = NA)
lookup[x]
unname(lookup[x])
# Usando operadores lógicos
x1 <- 1:10 %% 2 == 0
x1
which(x1)
x2 <- which(x1)
x2
y1 <- 1:10 %% 5 == 0
y2 <- which(y1)
y2
intersect(x2,y2)
x1 & y1
union(x2,y2)
setdiff(x2,y2)
# Configurando o diretório de trabalho
# Coloque entre aspas o diretório de trabalho que você está usando no seu computador
# Não use diretórios com espaço no nome
getwd()
library(rvest)
library(stringr)
library(tidyr)
pagina <- rread_html('http://forecast.weather.gov/MapClick.php?lat=42.31674913306716&lon=-71.42487878862437&site=all&smap=1#.VRsEpZPF84I')
pagina <- read_html('http://forecast.weather.gov/MapClick.php?lat=42.31674913306716&lon=-71.42487878862437&site=all&smap=1#.VRsEpZPF84I')
pagina
pagina
pagina
# Extraindo os registros
# Cada elemento na web page acima tem o seguinte formato em html:
# <span class="short-desc"><strong> DATE </strong> LIE <span class="short-truth"><a href="URL"> EXPLANATION </a></span></span>
?html_nodes
# Leitura da web page - Retorna um documento xml
webpage <- read_html('https://www.nytimes.com/interactive/2017/06/23/opinion/trumps-lies.html')
webpage
results <- webpage %>% html_nodes('.short-desc')
results
# Exercício 1 - Faça a leitura da url abaixo e grave no objeto pagina
# http://forecast.weather.gov/MapClick.php?lat=42.31674913306716&lon=-71.42487878862437&site=all&smap=1#.VRsEpZPF84I
pagina <- read_html('http://forecast.weather.gov/MapClick.php?lat=42.31674913306716&lon=-71.42487878862437&site=all&smap=1#.VRsEpZPF84I')
pagina
# Exercício 2 - Da página coletada no item anterior, extraia o texto que contenha as tags:
# "#detailed-forecast-body b  e .forecast-text"
html_nodes('detailed-forecast-body b')
class(pagina)
# Exercício 2 - Da página coletada no item anterior, extraia o texto que contenha as tags:
# "#detailed-forecast-body b  e .forecast-text"
results <- pagina %>% html_nodes('detailed-forecast-body b')
results
# Exercício 1 - Faça a leitura da url abaixo e grave no objeto pagina
# http://forecast.weather.gov/MapClick.php?lat=42.31674913306716&lon=-71.42487878862437&site=all&smap=1#.VRsEpZPF84I
pagina <- read_html('http://forecast.weather.gov/MapClick.php?lat=42.31674913306716&lon=-71.42487878862437&site=all&smap=1#.VRsEpZPF84I')
pagina
# Exercício 2 - Da página coletada no item anterior, extraia o texto que contenha as tags:
# "#detailed-forecast-body b  e .forecast-text"
results <- pagina %>% html_nodes('#detailed-forecast-body b')
results
# Exercício 2 - Da página coletada no item anterior, extraia o texto que contenha as tags:
# "#detailed-forecast-body b  e .forecast-text"
results <- pagina %>% html_nodes('detailed-forecast-body b')
results
# Exercício 2 - Da página coletada no item anterior, extraia o texto que contenha as tags:
# "#detailed-forecast-body b  e .forecast-text"
results <- pagina %>% html_nodes('detailed-forecast-body')
results
# Exercício 2 - Da página coletada no item anterior, extraia o texto que contenha as tags:
# "#detailed-forecast-body b  e .forecast-text"
results <- pagina %>% html_nodes('#detailed-forecast-body')
results
# Exercício 2 - Da página coletada no item anterior, extraia o texto que contenha as tags:
# "#detailed-forecast-body b  e .forecast-text"
results <- pagina %>% html_nodes('.forecast-text')
results
# Exercício 2 - Da página coletada no item anterior, extraia o texto que contenha as tags:
# "#detailed-forecast-body b  e .forecast-text"
results <- pagina %>% html_nodes("#detailed-forecast-body b  e .forecast-text")
results
# Exercício 2 - Da página coletada no item anterior, extraia o texto que contenha as tags:
# "#detailed-forecast-body b  e .forecast-text"
results <- pagina %>% html_node("#detailed-forecast-body b  e .forecast-text")
results
# Exercício 2 - Da página coletada no item anterior, extraia o texto que contenha as tags:
# "#detailed-forecast-body b  e .forecast-text"
results <- pagina %>% html_node("#detailed-forecast-body b")
results
# Exercício 4 - Extraímos a página web abaixo para você. Agora faça a coleta da tag "table"
url <- 'http://espn.go.com/nfl/superbowl/history/winners'
pagina <- read_html(url)
tag <- pagina %>% html_nodes('table')
tag
tag
class(tag)
tag
# Exercício 1 - Faça a leitura da url abaixo e grave no objeto pagina
# http://forecast.weather.gov/MapClick.php?lat=42.31674913306716&lon=-71.42487878862437&site=all&smap=1#.VRsEpZPF84I
pagina <- read_html('http://forecast.weather.gov/MapClick.php?lat=42.31674913306716&lon=-71.42487878862437&site=all&smap=1#.VRsEpZPF84I')
pagina
# Exercício 2 - Da página coletada no item anterior, extraia o texto que contenha as tags:
# "#detailed-forecast-body b  e .forecast-text"
results <- html_nodes(pagina, '#detailed-forecast-body b , .forecast-text')
results
# Exercício 3 - Transforme o item anterior em texto
texto <- html_text(results)
texto
paste(texto, collapse = ' ')
# Exercício 4 - Extraímos a página web abaixo para você. Agora faça a coleta da tag "table"
url <- 'http://espn.go.com/nfl/superbowl/history/winners'
pagina <- read_html(url)
tag <- pagina %>% html_nodes('table')
tag
tag <- html_nodes(pagina, 'table')
tag
# Exercício 5 - Converta o item anterior em um dataframe
df <- html_table(tag)[[1]]
df
class(df)
head(df)
view(df)
View(df)
str(df)
# Exercício 6 - Remova as duas primeiras linhas e adicione nomes as colunas
df <- df[-(1:2), ]
df
head(df)
names(df) <- c('number','date','site','results')
View(df)
# Exercício 7 - Converta de algarismos romanos para números inteiros
df$number <- 1:52
# Exercício 7 - Converta de algarismos romanos para números inteiros
df$number <- 1:58
# Exercício 7 - Converta de algarismos romanos para números inteiros
df$number <- 1:56
View(df)
df$number <- as.Date(df$date, '%B. %d %Y')
View(df)
# Exercício 7 - Converta de algarismos romanos para números inteiros
df$number <- 1:56
View(df)
df$date <- as.Date(df$date, '%B. %d %Y')
View(df)
# Exercício 4 - Extraímos a página web abaixo para você. Agora faça a coleta da tag "table"
url <- 'http://espn.go.com/nfl/superbowl/history/winners'
pagina <- read_html(url)
tag <- pagina %>% html_nodes('table')
# Exercício 5 - Converta o item anterior em um dataframe
df <- html_table(tag)[[1]]
df
# Exercício 6 - Remova as duas primeiras linhas e adicione nomes as colunas
df <- df[-(1:2), ]
head(df)
names(df) <- c('number','date','site','results')
View(df)
# Exercício 7 - Converta de algarismos romanos para números inteiros
df$number <- 1:56
View(df)
df$date <- as.Date(df$date, '%B. %d, %Y')
View(df)
# Exercício 8 - Divida a coluna result em 2 colunas com vencedores e perdedores
df <- separate(df, results, c('vencedor','perdedor'), sep = ', ', remove = T)
View(df)
# Exercício 9 - Inclua mais 2 colunas com o score dos vencedores e perdedores
# Dica: Você deve fazer mais uma divisão nas colunas
pattern <- '\\d+$'
df$pontosVencedor <- as.numeric(str_extract(df$vencedor, pattern))
df$pontosPerdedor <- as.numeric(str_extract(df$perdedor, pattern))
View(df)
df$vencedor <- gsub(pattern, "", df$vencedor)
df$perdedor <- gsub(pattern, "", df$perdedor)
View(df)
# Exercício 10 - Grave o resultado em um arquivo csv
write.csv('superbowl.csv', row.names = F)
dir()
# Exercício 10 - Grave o resultado em um arquivo csv
write.csv('superbowl.csv')
dir()
getwd()
View(df)
# Exercício 10 - Grave o resultado em um arquivo csv
write.csv(df, 'superbowl.csv', row.names = F)
dir()
